#######################################################
#                                                     #
# File Name: print_macros.cfg                         #
# Author: Juan Ignacio Muñoz Sánchez                  #
# Creation Date: 2024-12-20                           #
# Company: R3DIMENSION                                #
# Firmware Version: Klipper v0.12.0-316-g96cceed2     #
#                                                     #
# Description:                                        #
# This file focuses on managing print procedures,     #
# including PAUSE, CANCEL_PRINT, RESUME, and the      #
# sequences for starting and ending a print. These    #
# macros handle state preservation, toolhead parking, #
# temperature control, and safe recovery during       #
# critical print operations.                          #
#                                                     #
#######################################################


#-------------------------------------------------------PRINT VARIABLES-----------------------------------------------------------------------#  
[gcode_macro _PRINT_VARIABLE]

# Object and slicer variables -> Saved in order to use them in resume macros
variable_mode               : 0
variable_bed_temp           : 0.0
variable_extruder0_target   : 0.0
variable_extruder1_target   : 0.0
variable_initial_extruder   : 0
variable_extruder0_used     : "true"
variable_extruder1_used     : "false"
variable_print_area_start   : "0,0"
variable_print_area_end     : "0,0"
variable_total_layer        : 0
variable_layer_height       : 0.0
variable_print_sequence     : "by layer"
variable_enable_bed_mesh    : 0
variable_print_height       : 0


# Toolchange variables
variable_enable_toolchange_purge: 1
variable_toolchange_purge_distance: 5
variable_toolchange_purge_velocity: 1500 # velocity in mm/min 
variable_enable_toolchange_clean: 1
variable_enable_dual_toolchange: 0
variable_toolchange_speed: 2000
variable_toolchange_accel: 6000

# Pause, cancel and resume variables:
variable_event_mode         : "NORMAL" # This variable handles which event has invoked the pause or cancel. Also used in resume macro in order to take the corresponding actions
variable_z_hop_distance     : 5.0   # Z elevation (z hop) during PAUSE and CANCEL_PRINT if these are not defined inside these macros
variable_z_hop_speed        : 30.0  # z hop speed in mm/s
# Pause
variable_park_x_pause       : 500
variable_park_y_pause       : 20
variable_park_z_pause       : 200
variable_park_speed_pause   : 200
variable_idle_timeout_pause : 300   # Idle time in seconds to activate timeout while in print pause mode (5 minutes)
# Cancel
variable_idle_timeout_cancel: 3600   # Idle time in seconds to activate timeout normally
# Resume
variable_extruder0_target   : 0
variable_extruder1_target   : 0
variable_last_x_position    : 500
variable_last_y_position    : 360
variable_last_z_position    : 620
variable_resume_speed       : 200
variable_fan_speed_t0       : 0
variable_fan_speed_t1       : 0

# Miscelaneous variables
variable_turn_off_when_finish: 0
variable_finished_print: 0
gcode:



#-------------------------------------------------------START AND END PROCEDURES-----------------------------------------------------------#
###################################################################
# START PRINT
###################################################################
# To use this macro in Orcaslicer:
#INICIAR_IMPRESION MODE=0 BED_TEMP=[first_layer_bed_temperature] EXTRUDER0_TEMP={first_layer_temperature[0]} EXTRUDER1_TEMP={first_layer_temperature[1]}
#INITIAL_EXTRUDER=[initial_extruder] USED_EXTRUDER0={is_extruder_used[0]} USED_EXTRUDER1={is_extruder_used[1]} 
#PRINT_AREA_START={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_AREA_END={first_layer_print_max[0]},{first_layer_print_max[1]}
#ENABLE_BED_MESH=1 TOTAL_LAYER=[total_layer_count] LAYER_HEIGHT=[layer_height] PRINT_SEQUENCE=[print_sequence]

[gcode_macro START_PRINT]
# Initialization steps at the start of the print
gcode:
     
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}

    # Definir las variables pasadas desde el slicer con valores por defecto
    {% set mode = (params.MODE if params.MODE is defined else variables.mode if variables.mode is defined else 0)|int %}
    {% set bed_temp = (params.BED_TEMP if params.BED_TEMP is defined else variables.bed_temp if variables.bed_temp is defined else 0)|float %}
    {% set extruder0_target = (params.EXTRUDER0_TEMP if params.EXTRUDER0_TEMP is defined else variables.extruder0_target if variables.extruder0_target is defined else 0)|float %}
    {% set extruder1_target = (params.EXTRUDER1_TEMP if params.EXTRUDER1_TEMP is defined else variables.extruder1_target if variables.extruder1_target is defined else 0)|float %}
    {% set initial_extruder = (params.INITIAL_EXTRUDER if params.INITIAL_EXTRUDER is defined else variables.initial_extruder if variables.initial_extruder is defined else 0)|int %}
    {% set extruder0_used = ((params.USED_EXTRUDER0 if params.USED_EXTRUDER0 is defined else variables.extruder0_used if variables.extruder0_used is defined else "true")|lower in ['true', '1']) %}
    {% set extruder1_used = ((params.USED_EXTRUDER1 if params.USED_EXTRUDER1 is defined else variables.extruder1_used if variables.extruder1_used is defined else "false")|lower in ['true', '1']) %}
    {% set print_area_start = (params.PRINT_AREA_START if params.PRINT_AREA_START is defined else variables.print_area_start if variables.print_area_start is defined else "0,0") %}
    {% set print_area_end = (params.PRINT_AREA_END if params.PRINT_AREA_END is defined else variables.print_area_end if variables.print_area_end is defined else "0,0") %}
    {% set total_layer = (params.TOTAL_LAYER if params.TOTAL_LAYER is defined else variables.total_layer if variables.total_layer is defined else 0)|int %}
    {% set layer_height = (params.LAYER_HEIGHT if params.LAYER_HEIGHT is defined else variables.layer_height if variables.layer_height is defined else 0.2)|float %}
    {% set print_height = total_layer * layer_height %}
    {% set print_sequence = (params.PRINT_SEQUENCE if params.PRINT_SEQUENCE is defined else variables.print_sequence if variables.print_sequence is defined else "by layer") %}



    # The following variables now are not defined by params. Instead, it is used KlipperScreen menu in order to set the value of the variable prior to print
    #{% set enable_bed_mesh = params.ENABLE_BED_MESH|default(0)|int %}
    #{% set enable_toolchange_purge = params.ENABLE_TOOLCHANGE_CLEAN|default(0)|int %}
    #{% set toolchange_purge_distance = params.TOOLCHANGE_PURGE_DISTANCE|default(10)|float %}
    #{% set toolchange_purge_velocity = params.TOOLCHANGE_PURGE_VELOCITY|default(25)|float %}
    #{% set enable_toolchange_clean = params.ENABLE_TOOLCHANGE_CLEAN|default(0)|int %}

    # It is only neccesary to get the status of enable_bed_mesh
    # toolchange variables only apply to T0 and T1 macros, so there is where these values are obtained
    {% set enable_bed_mesh = printer["gcode_macro _PRINT_VARIABLE"].enable_bed_mesh|default(0)|int %}


    # Use this variable in order to know if its neccesary to do a home, quad gantry or bed mesh (basically measure the bed)
    {% if "xyz" in printer.toolhead.homed_axes and enable_bed_mesh == 0 and printer.quad_gantry_level.applied == 1 %}
        {% set need_measure_z = 0 %}
    {% else %}
        {% set need_measure_z = 1 %}
    {% endif %}
    
    
    # Save all parameters to variable:
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=mode VALUE={mode}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={extruder0_target}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={extruder1_target}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=initial_extruder VALUE={initial_extruder}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_used VALUE={extruder0_used}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_used VALUE={extruder1_used}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=print_area_start VALUE='{print_area_start}'
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=print_area_end VALUE='{print_area_end}'
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=total_layer VALUE={total_layer}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=layer_height VALUE={layer_height}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=print_height VALUE={print_height}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=print_sequence VALUE='"{print_sequence}"'
    
    # Ensure to restore original velocity limits from config file
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config["printer"]["max_velocity"]}
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.config["printer"]["max_accel"]}


    
    # Check door status
    {% if printer["gcode_macro _DOOR_STATUS"].door_status == 0 %}
        PAUSE_BASE
        RESPOND TYPE=command MSG="action:prompt_end"
        RESPOND TYPE=command MSG="action:prompt_begin ¡PUERTA ABIERTA!"
        RESPOND TYPE=command MSG="action:prompt_text La puerta está abierta. Cierrela y reinicie la impresión"
        RESPOND TYPE=command MSG="action:prompt_show"
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'DOOR_OPENED_STARTING'"
        

    # Check magnetic bed status
    #{% elif printer["gcode_button sensor_cama_magnetica"].state == "RELEASED" %}
    #    PAUSE_BASE
    #    RESPOND TYPE=command MSG="action:prompt_end"
    #    RESPOND TYPE=command MSG="action:prompt_begin ¡CAMA MAGNETICA DESACTIVADA!"
    #    RESPOND TYPE=command MSG="action:prompt_text La cama magnética está desactivada. Activela y reinicie la impresión"
    #    RESPOND TYPE=command MSG="action:prompt_show"
    #    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'MAGNETIC_BED_STARTING'"
        
    {% else %}

    #CHECK PUMP STATUS!!!
    #CHECK MOTOR STATUS!!!
    
        # Start heating:
        M140 S{bed_temp} # Heat bed
        M104 T0 S{extruder0_target}
        # Bed measuring -> Home, quad gantry or bed mesh only if needed
        {% if need_measure_z == 1 %}           
            # Check extruder usage and print modes in order to preheat T1 or not (heat if mode is 0 and it is used, or if mode isn't 0, so it is copy or mirror)
            {% if mode == 0 and extruder1_used %}
                {% if printer.extruder1.target < (extruder1_target - 20) %}
                    M104 S{(extruder1_target - 20)} T1 
                {% endif %}
            {% elif mode != 0 %}
                {% if printer.extruder1.target < (extruder1_target - 20) %}
                    M104 S{(extruder1_target - 20)} T1 
                {% endif %}
            {% endif %}
        
            # Always home the printer in X Y axis prior to anything
             G28 X Y

            M190 S{bed_temp}
            
            # And home Z if needed
            {% if "xyz" not in printer.toolhead.homed_axes %}
                G28 Z
            {% endif %}
            
            # Do a quad gantry if not done yet after a machine reset
            {% if printer.quad_gantry_level.applied == 0 %}
                RESPOND MSG="Ejecutando QUAD_GANTRY_LEVEL"
                QUAD_GANTRY_LEVEL
            {% endif %}
            Park_extruder

        # If it doesn't need a bed measure, the printer just homes xy in order to park it for heating in a safe position
        {% else %}
            G28 X Y
        {% endif %}

        # End of bed measuring
              
        # Heat extruders based on print mode and save its value to the print variables (just in case... pause macro should update this to the actual values)
        {% if mode == 0 %}
            {% if extruder0_used and extruder1_used %}
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={extruder0_target}
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={extruder1_target}
                {% if initial_extruder == 0 %}
                    M104 T0 S{extruder0_target}
                    M104 T1 S{(extruder1_target-20)}
                    M109 T0 S{extruder0_target}
                {% elif initial_extruder == 1 %}
                    M104 T1 S{extruder1_target}
                    M104 T0 S{(extruder0_target-20)}
                    M109 T1 S{extruder1_target}
                {% endif %}
            {% elif extruder0_used %}
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={extruder0_target}
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE=0
                M104 T0 S{extruder0_target}
                M104 T1 S0
                M109 T0 S{extruder0_target}
            {% elif extruder1_used %}
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE=0
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={extruder1_target}
                M104 T1 S{extruder1_target}
                M104 T0 S0
                M109 T1 S{extruder1_target}
            {% endif %}
        {% else %}
            M104 S{extruder0_target} T0
            M104 S{extruder0_target} T1
            M109 S{extruder0_target} T0
            M109 S{extruder0_target} T1
            SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={extruder0_target}
            SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={extruder0_target}
        {% endif %}

        # Ensure always to wait for bed to reach temperature
        M190 S{bed_temp}

        # Restart absolute positioning and reset extruder
        G90
        G92 E0

        # And by last, activate mirror or copy modes, cleaning the extruders prior to start the sequences
        {% if mode == 1 or mode == 2 %}
            PURGE_IN_BOX_T0 DISTANCE=15 SPEED=300
            CLEAN_NOOZLE_T0
            PURGE_IN_BOX_T1 DISTANCE=15 SPEED=300
            CLEAN_NOOZLE_T1
        {% endif %}
        
        {% if mode == 1 %}
            RESPOND MSG="Executing copy mode"
            ACTIVAR_MODO_COPIA
        {% elif mode == 2 %}
            RESPOND MSG="Executing mirror mode"
            ACTIVAR_MODO_ESPEJO
        {% endif %}
        
        # Start printing
    {% endif %}


###################################################################
# END PRINT
###################################################################
[gcode_macro END_PRINT]
# Finalization steps at the end of the print
gcode:
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}

    {% set z_hop_distance = 3.0 %}
    {% set z_hop_speed = variables.z_hop_speed|float if variables.z_hop_speed is defined else 30.0 %}
    {% set z_max = printer.configfile.config["stepper_z"]["position_max"]|default(625)|float %}
    {% set print_height = variables.print_height|float if variables.print_height is defined else 0.0 %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    {% set current_z = printer.toolhead.position.z|default(z_max)|float %}

    
    # Retract filament
    G10
    
    # Turn off all heaters - Extruders and bed
    TURN_OFF_HEATERS
    
    # Turn off layer fans and air extractor
    SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED=0
    SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED=0
    SET_FAN_SPEED FAN=ventilador_extractor SPEED=0

    # Reset bed mesh profile only if enable_bed_mesh = 1 (if 0, the user doesnt want an automatic bed mesh in the start procedure
    # but it might has done a bed mesh prior to printing, so it might want to use in later prints)
    # When using bed mesh in print (enable_bed_mesh = 1), the meshed area only corresponds to the objects area, so, if it isn't removed
    # in later prints, when specifying enable_bed_mesh = 0, it would still load this previous bed mesh (if not cleared by this command)
    {% if printer["gcode_macro _PRINT_VARIABLE"].enable_bed_mesh == 1 %}
        BED_MESH_CLEAR
    {% endif %}


    # Park carriages:
    
    # Raise in Z: -> z_hop_distance if mode is by layer, or print_height if it is by object, only if current_z is lower than max_position less z_hop_distance (ensure to not exceed machine limits)
    {% if current_z <= (z_max - z_hop_distance) %} # As z_max is defined to 125, it will only do z-hop if
        {% if print_sequence == "by layer" %} # Z hop is only done when print sequence is by layer
            G91 # Relative movement in order to do z hop
            G1 Z{z_hop_distance} F{z_hop_speed * 60}
            G90
        {% elif print_sequence == "by object" and (print_height > z_hop_distance) and (current_z < print_height) and (print_height <= z_max ) %}
            G90
            G1 Z{print_height} F{z_hop_speed * 60}
        {% endif %}
    {% endif %}
    
    # Return to absolute positioning
    G90

    # Home printer in order to park extruders
    G28 X Y

    # Once parked, go down z_hop distance in order to ensure to not stay in 620 mm or more
    G91
    G1 Z{z_hop_distance} F{(z_hop_speed * 60)}
    G90
    
    # And set T0 as active by default
    T0

    # Turn off extruders steppers
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0
    
    # Ensure to restore original velocity limits from config file
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config["printer"]["max_velocity"]}
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.config["printer"]["max_accel"]}



    
    # Set the print as finished in order to use it in iddle timeout and set a 20 min timeout value in order to have enough time to process any timelapse -> Printer will turn off when called from iddle timeout
    {% set turn_off = variables.turn_off_when_finish %}
    {% if turn_off == 1 %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=finished_print VALUE=1
        SET_IDLE_TIMEOUT TIMEOUT=1200
    {% endif %}
    
    # Print ends here


    

#-------------------------------------------------------PAUSES, CANCELS AND RESUMES-------------------------------------------------------------------#  
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    # Centralize access to _PRINT_VARIABLE
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    
    # Parameters definition with checks
    {% set event_mode = variables.event_mode if variables.event_mode is defined else "NORMAL" %}
    {% set timeout = variables.idle_timeout_cancel|float if variables.idle_timeout_cancel is defined else 3600 %}
    {% set z_hop_distance = variables.z_hop_distance|float if variables.z_hop_distance is defined else 3.0 %}
    {% set z_hop_speed = variables.z_hop_speed|float if variables.z_hop_speed is defined else 30.0 %}
    {% set z_max = printer.configfile.config["stepper_z"]["position_max"]|default(625)|float %}
    {% set print_height = variables.print_height|float if variables.print_height is defined else 0.0 %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    {% set current_z = printer.toolhead.position.z|default(z_max)|float %}
    {% set printer_paused = printer.pause_resume.is_paused %}

    ##### end of definitions #####

    # Command the printer to abort print so it resets sd card and everything.
    # Also, in order the user knows the print has been canceled before doing all actions below
    CANCEL_PRINT_BASE
    
    RESPOND TYPE=command MSG="action:prompt_end"
    
    # restore idle_timeout time 
    SET_IDLE_TIMEOUT TIMEOUT={timeout}
    
    # Retract some material
    {% if printer.toolhead.extruder.can_extrude %}
        G10
    {% endif %}

    # Turn off all heaters
    TURN_OFF_HEATERS

    # Turn off layer fans and air extractor
    SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED=0
    SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED=0
    SET_FAN_SPEED FAN=ventilador_extractor SPEED=0
 
    # Clear bed mesh profile
    {% if printer["gcode_macro _PRINT_VARIABLE"].enable_bed_mesh == 1 %}
        BED_MESH_CLEAR
    {% endif %}
    
    # Park toolheads if printer is homed
    {% if "xyz" in printer.toolhead.homed_axes %}
        # First lift in z axis -> z_hop_distance if mode is by layer, or print_height if it is by object, only if current_z is lower than max_position less z_hop_distance (ensure to not exceed machine limits)
        {% if current_z <= (z_max - z_hop_distance) %}
            {% if print_sequence == "by layer" %} # Z hop is only done when print sequence is by layer 
                G91 # Relative movement in order to do z hop
                G1 Z{z_hop_distance} F{z_hop_speed * 60}
                G90
            {% elif print_sequence == "by object" and (print_height > z_hop_distance) and (current_z < print_height) and (print_height <= z_max ) %} # If print sequence is by object, go to max height
                G90
                G1 Z{(print_height + z_hop_distance)} F{z_hop_speed * 60}
            {% endif %}

            # Home X Y in order to park carriage
            G28 X Y
    
            # Once parked, go down z_hop distance in order to ensure to not stay in 620 mm or more
            G91
            G1 Z-{z_hop_distance} F{(z_hop_speed * 60)}
            G90
        {% endif %}

        # After that, park the printer:
        # Ensure to reset gcode_offset before any movement
        SET_GCODE_OFFSET X=0 Y=0
    
    {% endif %}

    # Set T0 as active by default
    T0

    
    # Turn off layer fans
    M106 S0

    # Turn off extruders steppers
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder1 ENABLE=0

    # Restore accel velocity limits
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.config["printer"]["max_velocity"]}  ACCEL={printer.configfile.config["printer"]["max_accel"]}

    # Clear some variables
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'NORMAL'"
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0




[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    # Centralize access to _PRINT_VARIABLE
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}

    # Parameters definition 
    {% set event_mode = variables.event_mode if variables.event_mode is defined else "NORMAL" %}
    {% set idle_timeout = variables.idle_timeout_pause|float if variables.idle_timeout_pause is defined else 360 %}
    {% set z_hop_distance = variables.z_hop_distance|float if variables.z_hop_distance is defined else 5.0 %}
    {% set z_hop_speed = variables.z_hop_speed|float if variables.z_hop_speed is defined else 30.0 %}
    {% set park_x = variables.park_x_pause|float if variables.park_x_pause is defined else 500.0 %}
    {% set park_y = variables.park_y_pause|float if variables.park_y_pause is defined else 20.0 %}
    {% set park_z = variables.park_z_pause|float if variables.park_z_pause is defined else 200.0 %}
    {% set z_max = printer.configfile.config["stepper_z"]["position_max"]|default(625)|float %}
    {% set park_speed = variables.park_speed_pause|float if variables.park_speed_pause is defined else 200.0 %}
    {% set print_height = variables.print_height|float if variables.print_height is defined else 0.0 %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    # If not defined, set current_position to the "middle" of the printer, and max_z in order to avoid it does any z_hop or anything weird
    {% set current_position = printer.toolhead.position if "xyz" in printer.toolhead.homed_axes else {"x": 500, "y": 360, "z": z_max} %} 
    {% set current_z = current_position.z|default(z_max)|float %}
    {% set current_extruder0_target = printer.extruder.target|default(0)|float %}
    {% set current_extruder1_target = printer.extruder1.target|default(0)|float %}
    {% set fan_speed_t0 = printer["fan_generic ventilador_capa_T0"].speed|default(0)|int %}
    {% set fan_speed_t1 = printer["fan_generic ventilador_capa_T1"].speed|default(0)|int %}


    # Execute the pause_base command in order the printer stops following the commands in the file
    PAUSE_BASE

    # VARIABLE MANAGEMENT
    # Save the printing position to print variables in order to use them in resume macro
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=last_x_position VALUE={current_position.x}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=last_y_position VALUE={current_position.y}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=last_z_position VALUE={current_position.z}

    # Save the printing temperatures to print variables in order to use them in resume macro
    # (Only if they are different from 0. If they are 0, the restore temperature will be the one defined in the start macro, or the previous value asigned to this variable)
    # This is done in purpose because some macros such as the pump_speed control can set the temperature to 0 if an error is found, but when pressing resume, the user espects the printer just print again and nothing else, no manual operation
    {% if current_extruder_target != 0 %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={current_extruder0_target}
    {% endif %}
    {% if current_extruder1_target != 0 %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={current_extruder1_target}
    {% endif %}

    # Save the fans speed in order to restore it in resume macro
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=fan_speed_t0 VALUE={fan_speed_t0}
    SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=fan_speed_t1 VALUE={fan_speed_t1}
    # END OF VARIABLE MANAGEMENT

    # Pause procedure starts here:
    # Set a new idle_timeout value
    {% if idle_timeout > 0 %}
        SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
    {% endif %}

    
    # Retract some material
    {% if printer.toolhead.extruder.can_extrude %}
        G10
    {% endif %}

    # Raise in z always (if printer is homed) and current_z is lower than machine limits
    {% if "xyz" in printer.toolhead.homed_axes %}
        # Lift in Z by z_hop_distance if below machine limits
        {% if current_z < (z_max - z_hop_distance) %}
            G91  # Relative movement
            G1 Z{z_hop_distance} F{z_hop_speed * 60}
            G90
            {% set current_z = current_z + z_hop_distance %} # Update the new curent_z
        {% endif %}
    {% endif %}

    # And turn off fan layers
    SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED=0
    SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED=0


    
    # EVALUATION OF THE MODES -> Extra actions in addition to pause_base

    # If pause comes from an ADC_OUT_OF_RANGE ERROR
    
    {% if event_mode == "ADC_OUT_OF_RANGE" %}
        # Nothing for now
    {% endif %}
    
    # If pause comes from a opened door
    {% if event_mode == "DOOR_OPENED" %}
        # Nothing for now
    {% endif %}



    # If pause comes from a the magnetic bed inactive
    {% if event_mode == "MAGNETIC_BED" %}
        # Nothing for now
    {% endif %}



    # If pause comes from a fail in xy motors do nothing (previous lift) or lift to print height if mode is by object
    {% if event_mode == "FAIL_XY" %}
        {% if "xyz" in printer.toolhead.homed_axes %}
            G90 # Ensure to be in absolute coordinates
            # Lift Z to print_height before parking only if print sequence is by object, in order to avoid colisions
            {% if print_sequence == "by object" and (print_height > z_hop_distance) and (print_height <= z_max ) %}
                G1 Z{print_height} F{z_hop_speed * 60}
            {% endif %}
        {% endif %}
    {% endif %}



    # If the pause comes from a pump fail, park the toolhead in order to do maintenance tasks as the extruder might be damaged due to heat
    {% if event_mode == "FAIL_PUMP" %}
        # Ensure to turn off heaters
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0  # Turn off extruder 0.
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0  # Turn off extruder 1.
        # Park toolheads if printer is homed
        {% if "xyz" in printer.toolhead.homed_axes %}
            G90 # Ensure to be in absolute coordinates
        
            {% if print_sequence == "by object" %}
                # Determine the target Z height (highest between print_height and park_z)
                {% set target_z = print_height if print_height > park_z else park_z %}
                {% if target_z > current_z %}
                    G1 Z{target_z} F{z_hop_speed * 60}  # Move directly to the highest height before parking
                {% endif %}
                
                # Park the carriage
                G1 X{park_x} Y{park_y} F{park_speed * 60}
        
            {% else %}
                # Determine the target Z height (consider park_z if current_z is below it)
                {% set target_z = park_z if current_z < park_z else current_z %}
        
                # Move directly to the final parking position in X, Y, and Z
                G1 X{park_x} Y{park_y} Z{target_z} F{park_speed * 60}
            {% endif %}
        {% endif %}
    {% endif %}



    # If the pause comes from a fan fail, park the toolhead in order to do maintenance tasks as the extruder might be damaged due to heat
    {% if event_mode == "FAIL_FANS" %}
        # Ensure to turn off heaters
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0  # Turn off extruder 0.
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0  # Turn off extruder 1.
        # Park toolheads if printer is homed
        {% if "xyz" in printer.toolhead.homed_axes %}
            G90 # Ensure to be in absolute coordinates
        
            {% if print_sequence == "by object" %}
                # Determine the target Z height (highest between print_height and park_z)
                {% set target_z = print_height if print_height > park_z else park_z %}
                {% if target_z > current_z %}
                    G1 Z{target_z} F{z_hop_speed * 60}  # Move directly to the highest height before parking
                {% endif %}
                
                # Park the carriage
                G1 X{park_x} Y{park_y} F{park_speed * 60}
        
            {% else %}
                # Determine the target Z height (consider park_z if current_z is below it)
                {% set target_z = park_z if current_z < park_z else current_z %}
        
                # Move directly to the final parking position in X, Y, and Z
                G1 X{park_x} Y{park_y} Z{target_z} F{park_speed * 60}
            {% endif %}
        {% endif %}
    {% endif %}
   
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    # Centralize access to _PRINT_VARIABLE
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}

    # Parameters definition
    {% set event_mode = variables.event_mode if variables.event_mode is defined else "NORMAL" %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    {% set resume_speed = variables.resume_speed|float if variables.resume_speed is defined else 200 %}
    {% set last_x_position = variables.last_x_position|float if variables.last_x_position is defined else 500 %}
    {% set last_y_position = variables.last_y_position|float if variables.last_y_position is defined else 360 %}
    {% set last_z_position = variables.last_z_position|float if variables.last_z_position is defined else 620 %}
    {% set extruder0_target = printer.extruder.target if printer.extruder.target > 0 else (variables.extruder0_target|float if variables.extruder0_target is defined else 0) %}
    {% set extruder1_target = printer.extruder1.target if printer.extruder1.target > 0 else (variables.extruder1_target|float if variables.extruder1_target is defined else 0) %}

    # Retrieve saved fan speeds or use current speeds
    {% set fan_speed_t0 = printer["fan_generic ventilador_capa_T0"].speed if printer["fan_generic ventilador_capa_T0"].speed > 0 else (variables.fan_speed_t0|float if variables.fan_speed_t0 is defined else 0) %}
    {% set fan_speed_t1 = printer["fan_generic ventilador_capa_T1"].speed if printer["fan_generic ventilador_capa_T1"].speed > 0 else (variables.fan_speed_t1|float if variables.fan_speed_t1 is defined else 0) %}

    # Retrieve refrigeration system states
    {% set pump_error = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].pump_error|default(0)|int %}
    {% set fan_error = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].fan_error|default(0)|int %}
    {% set force_pump = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_pump|default(0)|int %}
    {% set force_fan = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_fan|default(0)|int %}

    # Default to not allowing resume
    {% set can_resume = False %}


    # End of parameters definition

    
    RESPOND TYPE=command MSG="action:prompt_end"
    # Check if all conditions are met in order to enable can_resume or not:
    # Check if doors and magnetic bed are activated, pump is fine, if runout sensor is fine, and the target of extruders isn't anormal
    {% if printer["gcode_macro _DOOR_STATUS"].door_status == 0 %}
        {% set can_resume = False %}
        RESPOND MSG="No se puede reanudar: las puertas están abiertas. Ciérrelas y haga clic en reanudar."
    {% elif printer["gcode_button sensor_cama_magnetica"].status == "released" %}
        {% set can_resume = False %}
         RESPOND MSG="No se puede reanudar: la cama magnética está desactivada. Actívela y haga clic en reanudar."
    {% elif pump_error == 1 and force_pump == 0 %}
        {% set can_resume = False %}
        RESPOND TYPE=command MSG="action:prompt_end"
        RESPOND TYPE=command MSG="action:prompt_begin ¡FALLO EN LA BOMBA DE REFRIGERACION!"
        RESPOND TYPE=command MSG="action:prompt_text ¡Fallo en el sistema de refrigeración! La bomba de refrigeración está en fallo, no es posible reanudar. Resetee la bomba o fuerce la reanudación sin su control"
        RESPOND TYPE=command MSG="action:prompt_footer_button RESETEAR BOMBA|RESET_BOMBA|primary"
        RESPOND TYPE=command MSG="action:prompt_footer_button Forzar Reanudacion|RESUME_PRINT_NO_SAFETY_CONTROL_PUMP|error"
        RESPOND TYPE=command MSG="action:prompt_footer_button Cerrar esta pestaña|RESPOND TYPE=command MSG=\"action:prompt_end\"|error"
        RESPOND TYPE=command MSG="action:prompt_show"
    {% elif fan_error == 1 and force_fan == 0 %}
        {% set can_resume = False %}
        RESPOND TYPE=command MSG="action:prompt_end"
        RESPOND TYPE=command MSG="action:prompt_begin ¡FALLO EN LOS VENTILADORES DE REFRIGERACION!"
        RESPOND TYPE=command MSG="action:prompt_text ¡Fallo en el sistema de refrigeración! Los ventiladores están en fallo, no es posible reanudar. Resetee los ventiladores o fuerce la reanudación sin su control (Recuerde reemplazar el / los ventiladores que se hayan bloqueado)."
        RESPOND TYPE=command MSG="action:prompt_button RESETEAR VENTILADORES|RESET_VENTILADORES|primary"
        RESPOND TYPE=command MSG="action:prompt_footer_button Forzar Reanudacion|RESUME_PRINT_NO_SAFETY_CONTROL_FANS|error"
        RESPOND TYPE=command MSG="action:prompt_footer_button Cerrar esta pestaña|RESPOND TYPE=command MSG=\"action:prompt_end\"|error"
        RESPOND TYPE=command MSG="action:prompt_show"
    {% elif 
        (printer.dual_carriage.carriage_0 == "PRIMARY" and extruder0_target == 0) or
        (printer.dual_carriage.carriage_1 == "PRIMARY" and extruder1_target == 0) or
        ((printer.dual_carriage.carriage_1 == "COPY" or printer.dual_carriage.carriage_1 == "MIRROR") and (extruder0_target == 0 or extruder1_target == 0))
    %}
        {% set can_resume = False %}
        RESPOND MSG="No se puede reanudar: uno o más extrusores tienen una consigna de temperatura de 0. Establezca manualmente las temperaturas deseadas y haga clic en reanudar."

    {% else %}
        {% set can_resume = True %}
    {% endif %}

    # Resume only if all conditions are met and printer is paused (otherwise, it is a nosense to attempt to resume)
    {% if can_resume and printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG="action:prompt_end"

        # First check if the pause has been invoked in start_print macro when checking the doors or the bed, so it will call the macro start_print again, and none of the following actions will be exected
        {% if event_mode == "DOOR_OPENED_STARTING" or event_mode == "MANETIC_BED_STARTING" %}

            # Resume the print, restore event_mode variable and call again to start_print macro
            RESUME_BASE # Resume is placed prior to call start_print macro so if anything is not ok inside start_print, when calling pause inside, it gets paused, otherwise, it would be paused and after that, resumed again
            SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'NORMAL'"
            START_PRINT # No parameters needed as these will be taken from the saved variables
        {% else %}

        
            # Ensure temperatures are restored before resuming. Prompt the user that it will take a while if temp is quite lower
            {% if printer.extruder.temperature < (extruder0_target - 10) or printer.extruder1.temperature < (extruder1_target - 10) %}
                RESPOND MSG="Restableciendo temperaturas, se reanudará la impresión en breve..."
            {% endif %}
            M104 S{extruder0_target} T0
            M104 S{extruder1_target} T1

    
            # Restore fan speeds
            SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED={fan_speed_t0}
            SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED={fan_speed_t1}
    
            # Save the dual_carriage state prior to do any movement (it ensures to keep the last mode (t0,t1,copy..)
            # Note that if the user has changed the mode when printer is paused, now it will print as desired by user
            # This can not be placed in the pause macro as it wont let the user change the mode
            # Also note that those changes are extrematelly weird and shouldn't be done, but if desired...
            SAVE_DUAL_CARRIAGE_STATE NAME=RESUME  

            # Resuming when coming from a fail_xy needs to be done carefully!!
            {% if event_mode == "FAIL_XY" or printer["output_pin FALLO_MOTORES"].value == 1 %}
                RESETEAR_ALARMA_MOTORES
                G28 XY
                M109 S{extruder0_target} T0
                M109 S{extruder1_target} T1
                {% if printer.dual_carriage.carriage_0 == "PRIMARY" and printer.dual_carriage.carriage_1 == "INACTIVE" %}
                    T0
                {% elif printer.dual_carriage.carriage_1 == "PRIMARY" %}
                    T1
                {% elif printer.dual_carriage.carriage_1 == "COPY" %}
                    ACTIVAR_MODO_COPIA
                {% elif printer.dual_carriage.carriage_1 == "MIRROR" %}
                    ACTIVAR_MODO_ESPEJO
                {% endif %}
                RESUME_BASE
            {% else %}

                # Resume:
                
                # Wait for extruders to reach temperature
                M109 S{extruder0_target} T0
                M109 S{extruder1_target} T1
                # Restore the dual carriage state in order to ensure to keep printing as desired
                RESTORE_DUAL_CARRIAGE_STATE NAME=RESUME MOVE=1 MOVE_SPEED={resume_speed}
                
                # Unretract filament
                G11
        
                # Move the toolhead to the last position
                {% if print_sequence == "by object" %}
                    G90
                    G1 X{last_x_position} Y{last_y_position} F{resume_speed * 60}
                    G1 Z{last_z_position} F{resume_speed * 60}
                {% else %}
                    G90
                    G1 X{last_x_position} Y{last_y_position} Z{last_z_position} F{resume_speed * 60}
                {% endif %}
                
                # Restore the event_mode variable
                SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'NORMAL'"
                
                # Resume the print
                RESPOND TYPE=command MSG="action:prompt_end"
                RESUME_BASE
            {% endif %}
        {% endif %}
    {% endif %}
        
    
##########################################################
# TIMEOUT
##########################################################
[idle_timeout]
# This macro handles the behavior of the printer when it enters idle timeout.
# If the printer is paused, it turns off the extruders and cooling fans.
# If the printer is not paused, it turns off all heaters and fans 
# (except liquid cooling) and disables the motors to prevent overheating 
# or power consumption when idle.
gcode:

  # Turns off extruders and cooling fans if the printer is paused
  {% if printer.pause_resume.is_paused %}
    RESPOND TYPE=echo MSG="Idle Timeout en estado de pausa: Extrusor apagado"
    M104 S0  T0 # Turns off extruder 0 to prevent unnecessary heating
    M104 S0  T1 # Turns off extruder 1 to prevent unnecessary heating
    SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED=0
    SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED=0
  {% else %}
    # Turns off all heaters and fans (except liquid cooling) and disables motors if not paused
    RESPOND TYPE=echo MSG="Idle Timeout: Todos calentadores apagados"
    TURN_OFF_HEATERS # Turns off all heaters to prevent overheating
    SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED=0
    SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED=0
    SET_FAN_SPEED FAN=ventilador_extractor SPEED=0
    # Turn off when speciied in the print macro
    {% if printer["_PRINT_VARIABLE"].turn_off_when_finish == 1 and printer["_PRINT_VARIABLE"].finished_print == 1 %}
        WAIT_AND_TURN_OFF
    {% endif %}
  {% endif %}
  
timeout: 3600  # Time in seconds before timeout occurs in normal state, if not specified in any macro. (If a macro sets a diferent value, it will have that new value)



#-------------------------------------------------------OTHERS-----------------------------------------------------------#
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

 
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _PRINT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _PRINT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}
  