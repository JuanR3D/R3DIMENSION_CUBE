#-------------------------------------------------------FILAMENT MANAGEMENT-----------------------------------------------------------#  
######################################################################
# LOAD FILAMENT
######################################################################
[gcode_macro LOAD_FILAMENT]
# Macro to load filament into the extruder. It disables the filament sensors temporarily,
# heats the extruder if not heated before, and loads the filament by a set distance.
gcode:
    # Save the current G-code state, allowing the original settings to be restored after loading the filament.
    SAVE_GCODE_STATE NAME=load_state

    {% set load_distance = 100 %}
    {% set load_velocity = 25 * 60 %}  # Set the loading speed to 40 mm/s (G1 commands are in mm/min, so multiply by 60).

    # Check if a target temperature is already set; if not, use 190°C.
    {% if printer[printer.toolhead.extruder].target == 0 %}
        {% set target_temp = 190 %}
    {% else %}
        {% set target_temp = printer[printer.toolhead.extruder].target %}
    {% endif %}
    M104 S{target_temp}
    # Heat if the current temperature is below the target.
    {% if printer[printer.toolhead.extruder].temperature < target_temp -10 %}
        RESPOND TYPE=echo MSG="Calentando extrusor a {target_temp}°C, por favor espere"
        M109 S{target_temp}
    {% endif %}
    
    G91  # Switch to relative positioning mode.
    G92 E0  # Reset the extruder position.
    G1 E{load_distance} F{load_velocity}  # Load the filament at the maximum allowed speed
    
    # Restore the previously saved G-code state.
    RESTORE_GCODE_STATE NAME=load_state


######################################################################
# UNLOAD FILAMENT
######################################################################
[gcode_macro UNLOAD_FILAMENT]
# Macro to unload filament from the extruder. It temporarily disables the filament sensors,
# heats the extruder, purges a small amount of filament, and then retracts the filament..
gcode:

    # Save the current G-code state before unloading the filament.
    SAVE_GCODE_STATE NAME=unload_state
    {% set extrude_distance = 10 %}
    {% set unload_distance = 100 %}
    {% set extrude_velocity = 10 * 60 %}  # Set the extrude speed to 2 mm/s.
    {% set retract_velocity = 50 * 60 %}  # Set the retraction speed to 30 mm/s.

    # Check if a target temperature (greater than 190°C) is set; if not, use 190°C.
    {% if printer[printer.toolhead.extruder].target < 190 %}
        {% set target_temp = 190 %}
    {% else %}
        {% set target_temp = printer[printer.toolhead.extruder].target %}
    {% endif %}
    M104 S{target_temp}
    # Heat if the current temperature is below the target.
    {% if printer[printer.toolhead.extruder].temperature < target_temp %}
        RESPOND TYPE=echo MSG="Calentando extrusor a {target_temp}°C, por favor espere"
        M109 S{target_temp}
    {% endif %}
    
    G91  # Switch to relative positioning mode.
    G92 E0  # Reset the extruder position.
    G1 E{extrude_distance} F{extrude_velocity}  # Perform a small purge before unloading.
    G1 E-{unload_distance} F{retract_velocity}  # Unload the filament quickly at the maximum allowed speed.
    
    # Restore the previously saved G-code state.
    RESTORE_GCODE_STATE NAME=unload_state



######################################################################
# PURGE FILAMENT
######################################################################
[gcode_macro PURGE_FILAMENT]
# Macro to purge filament from the extruder. It temporarily disables the filament sensors,
# heats the extruder, and purges a specified amount of filament at a slow speed.
gcode:

    # Save the current G-code state before purging the filament.
    SAVE_GCODE_STATE NAME=purge_state
  
    {% set purge_distance = params.DISTANCE|default(15)|float %}
    {% set purge_vel = params.SPEED|default(600)|float %}
    
    # Check if a target temperature (greater than 190°C) is set; if not, use 190°C.
    {% if printer[printer.toolhead.extruder].target < 190 %}
        {% set target_temp = 190 %}
    {% else %}
        {% set target_temp = printer[printer.toolhead.extruder].target %}
    {% endif %}
    M104 S{target_temp}
    # Inform about this if the current temperature is below the target.
    {% if printer[printer.toolhead.extruder].temperature < target_temp - 10 %}
        {% if printer.print_stats.state != "printing" %}
            RESPOND TYPE=echo MSG="Calentando extrusor a {target_temp}°C, por favor espere"
        {% endif %}
    {% endif %}
    M109 S{target_temp}

    # Purge and retract
    G92 E0  # Reset the extruder position.
    G1 E{purge_distance} F{purge_vel}  
    G10 # Retract
    
    # Restore the previously saved G-code state.
    RESTORE_GCODE_STATE NAME=purge_state

[gcode_macro PURGE_IN_BOX_T0]
gcode:
    {% set purge_position = -45 %}
    {% set variables= printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set purge_distance = (params.DISTANCE|float if params.DISTANCE|default(0)|float > 0 else (variables.toolchange_purge_distance|float if variables.toolchange_purge_distance|default(0)|float > 0 else 10 )) %}
    {% set purge_vel = (params.SPEED|float if params.SPEED|default(0)|float > 0 else (variables.toolchange_purge_velocity|float if variables.toolchange_purge_velocity|default(0)|float > 0 else 1500 )) %}
    {% set last_fan_speed = printer["fan_generic ventilador_capa_T0"].speed %} # Save last fan speed in order to restore after purge

    SAVE_GCODE_STATE NAME=purge_in_box_t0
    # Proceed to purge only if at least x is homed
    {% if "x" in printer.toolhead.homed_axes %}
        # Ensure to activate extruder if not active -> Similar to T0 macro but ensuring to not parking T1
        {% if printer.toolhead.extruder != "extruder" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Selects extruder carriage 0
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="" # Ensures that extruder1 stops following extruder0 movements
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder stepper follows movements commanded to extruder
            SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=0  # Set extruder0 fans as active
        {% endif %}
        # Go to purge position
        G90
        G1 X{purge_position} F20000
        M106 S255 P0 # Activate the fan
        PURGE_FILAMENT DISTANCE={purge_distance} SPEED={purge_vel}
        M106 S{last_fan_speed} P0 # 
    {% endif %}
    RESTORE_GCODE_STATE NAME=purge_in_box_t0

[gcode_macro PURGE_IN_BOX_T1]
gcode:
    {% set purge_position = 1165 %}
    {% set variables= printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set purge_distance = (params.DISTANCE|float if params.DISTANCE|default(0)|float > 0 else (variables.toolchange_purge_distance|float if variables.toolchange_purge_distance|default(0)|float > 0 else 10 )) %}
    {% set purge_vel = (params.SPEED|float if params.SPEED|default(0)|float > 0 else (variables.toolchange_purge_velocity|float if variables.toolchange_purge_velocity|default(0)|float > 0 else 1500 )) %}
    {% set last_fan_speed = printer["fan_generic ventilador_capa_T1"].speed %} # Save last fan speed in order to restore after purge
    
    SAVE_GCODE_STATE NAME=purge_in_box_t1
    # Proceed to purge only if at least x is homed
    {% if "x" in printer.toolhead.homed_axes %}
        # Ensure to activate extruder1 if not active -> Similar to T1 macro but ensuring to not parking T0
        {% if printer.toolhead.extruder != "extruder1" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1  # Activates extruder 0
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Selects extruder carriage 0
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="" # Ensures that extruder stops following extruder1 movements
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder1" # Ensures that extruder1 stepper follows movements commanded to extruder1
            SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=1  # Set extruder1 fans as active
        {% endif %}
        # Go to purge position
        G90
        G1 X{purge_position} F20000
        M106 S255 P1 # Activate the fan
        PURGE_FILAMENT DISTANCE={purge_distance} SPEED={purge_vel}
        M106 S{last_fan_speed} P1
    {% endif %}
    RESTORE_GCODE_STATE NAME=purge_in_box_t1

[gcode_macro CLEAN_NOOZLE_T0]
gcode:
    {% set cleaning_position = -45 %}
    {% set last_fan_speed = printer["fan_generic ventilador_capa_T0"].speed %} # Save last fan speed in order to restore after cleaning
    
    SAVE_GCODE_STATE NAME=clean_noozle_t0
    # Proceed to clean only if at least x is homed
    {% if "x" in printer.toolhead.homed_axes %}
         # Ensure to activate extruder if not active -> Similar to T0 macro but without parking T1
        {% if printer.toolhead.extruder != "extruder" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Selects extruder carriage 0
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="" # Ensures that extruder1 stops following extruder movements
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder1 stepper follows movements commanded to extruder1
            SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=0  # Set extruder1 fans as active
        {% endif %}
        # Go to cleaning position
        G90
        G1 X{cleaning_position} F20000
        # Clean
        G91
        M106 S255 P0 # Activate the fan
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        M106 S{last_fan_speed} P0
        G90
    {% endif %}
    RESTORE_GCODE_STATE NAME=clean_noozle_t0

[gcode_macro CLEAN_NOOZLE_T1]
gcode:
    {% set cleaning_position = 1165 %}
    {% set last_fan_speed = printer["fan_generic ventilador_capa_T1"].speed %} # Save last fan speed in order to restore after cleaning

    SAVE_GCODE_STATE NAME=clean_noozle_t1
    {% if "x" in printer.toolhead.homed_axes %}
        # Ensure to activate extruder if not active -> Similar to T0 macro but without parking T1
        {% if printer.toolhead.extruder != "extruder1" %}
            ACTIVATE_EXTRUDER EXTRUDER=extruder1  # Activates extruder 0
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Selects extruder carriage 0
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="" # Ensures that extruder stops following extruder1 movements
            SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder1" # Ensures that extruder1 stepper follows movements commanded to extruder1
            SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=1  # Set extruder1 fans as active
        {% endif %}
        # Go to cleaning position
        G90
        G1 X{cleaning_position} F20000
        # Clean
        G91
        M106 S255 P1 # Activate the fan
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        G1 X-30 F20000
        G1 X30 F20000
        M106 S{last_fan_speed} P1
        G90
    {% endif %}
    RESTORE_GCODE_STATE NAME=clean_noozle_t1

    