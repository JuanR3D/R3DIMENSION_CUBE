# This file contains all macros that have been redefined and are not included in other files
# (Note that there might be redefined macros in other files, as they belong to that file)


##########################################################
# HOME
##########################################################
#[safe_z_home]
# This section allows the printer to perform homing safely.
# It moves the toolhead to a defined XY position before homing,
# and lifts the Z-axis slightly to avoid any collisions with the bed.
# The Z-axis is raised (z_hop) by 5mm to avoid the nozzle hitting anything on the print surface.
#home_xy_position: 560, 450  # XY position for homing, ensure it's within the build volume.
#speed: 150  # Homing speed, should be slow to avoid damage.
#z_hop: 5  # Z-axis lift during homing, lifting the nozzle before moving.
#z_hop_speed: 10.0  # Z-axis lift speed, slow to ensure precision.
#move_to_previous: False  # Set to False so the toolhead does not return to its previous position.
#z_homing_delay: 400 # ms to wait previous to perform home z if it is requested 
# Important note -> z_homing_delay is a new variable addet to safe_z_home.py so it stops a time defined z_homing_delay, previous to perform home z after traveling to home_xy_position
# Also, homing.py has been modified in order to set a 100 ms delay previous to second home (it affects to all axis)

##########################################################
# HOME
##########################################################
[gcode_macro G28]
rename_existing: G99928
description: Custom G28 with safe Z homing
# **Homing speeds and retracts and all that stuff is defined in the corresponding section of [stepper_xxx]
gcode:
    # Initial configuration
    {% set z_hop = 5.0 %}  # Z Hop height
    {% set z_hop_speed = 15.0 %}  # Z Hop speed

    # Retrieve current homing status and position
    {% set homed_z = 'z' in printer.toolhead.homed_axes %}
    {% set cur_z = printer.toolhead.position.z|default(0)|float %}

    # Normalize and determine which axes need homing
    {% set param_string = params.keys() | join('') | upper %}  # Combine all parameters into a single string in uppercase -> Now G28 can also be commanded as G28 xy  not only G28 X Y for example
    {% set need_x = 'X' in param_string %}
    {% set need_y = 'Y' in param_string %}
    {% set need_z = 'Z' in param_string %}
    {% if not need_x and not need_y and not need_z %}
        {% set need_x = True %}
        {% set need_y = True %}
        {% set need_z = True %}
    {% endif %}

    {% if printer["gcode_button alarma_z"].state == "PRESSED" %}
        RESPOND MSG="LOS MOTORES DE Z EST√ÅN EN FALLO, RESUELVA ESTE ERROR ANTES DE REALIZAR CUALQUIER MOVIMIENTO"
    {% elif printer["gcode_button sensor_puertas"].state != "PRESSED" %}
        RESPOND MSG="Cierre las puertas antes de realizar cualquier movimiento en la maquina"
    {% else %}
        
    
        # Reset alarm in motors prior to do any movement
        {% if printer["gcode_button alarma_xy"].state == "PRESSED" %}
            RESETEAR_ALARMA_MOTORES
        {% endif %}
    
        # Perform Z Hop if necessary - Only if any axis has been homed before or if current z height is lower than z_hop distance
        {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes %}
            # If Z is not homed, assume Z = 0 and perform Z Hop
            SET_KINEMATIC_POSITION z=0
            G90
            G1 Z{z_hop} F{z_hop_speed * 60}
            M18 # Disable motors in order to unhome them, just in case that some error occurs, they dont have a defined position (they don't disable at all as enable signal isn't controlled via the controller but via the drivers alarm signal (external))
        {% elif homed_z and cur_z < z_hop %}
            # If Z is below z_hop, lift it
            G1 Z{z_hop} F{z_hop_speed * 60}
        {% endif %}
    
        # Home X if needed
        {% if need_x %}
            G99928 X
        {% endif %}
    
        # Home Y if needed
        {% if need_y %}
            G99928 Y
        {% endif %}
    
        # Home Z if needed
        {% if need_z %}
            HOME_EVAL_Z # Evaluate homing of z in a new macro as it is needed to get the actual instance of homed_axes (Remember how macros get printer info!!)
        {% endif %}
    {% endif %}
    
[gcode_macro HOME_EVAL_Z]
description: Evaluate and home Z axis safely
gcode:
    # Retrieve updated homing status
    {% set pos = printer.toolhead.position %}
    
    {% set z_hop = 5.0 %}  # Z Hop height
    {% set z_hop_speed = 15.0 %}  # Z Hop speed
    {% set home_x_pos = 560.0 %}  # Safe position for homing X
    {% set home_y_pos = 580.0 %}  # Safe position for homing Y
    {% set move_speed = 150 %}

    {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
        G99928 X Y
    {% endif %}

    # Move to a safe position for Z homing
    G1 X{home_x_pos} Y{home_y_pos} F{move_speed *60}

    # Ensure to finish all movements and set a delay before homing
    M400
    G4 P400 # Delay of 400 ms

    # HERE A SET_Z_ACCEL COMMAND OR SET_VELOCITY_LIMIT SHOULD BE CALLED IN ORDER TO LIMIT Z_ACCEL VALUE
    
    # Start by moving 1 mm at homing_z_speed prior to command g28 so the acceleration is done while not searching for a trigger
    #SET_KINEMATIC_POSITION z={z_hop} # X Y will have the last commanded position by default of this command (in this case, home_x_pos and home_y_pos)
    #G91
    #G1 Z-1 F{printer.configfile.config["stepper_z"]["homing_speed"] * 60}
    #G90
    G99928 Z

    # Do a z-hop again in order to avoid future colisions
    G1 Z{z_hop} F{z_hop_speed * 60}

    # HERE Z ACCEL SHOULD BE RESTORED TO THE CONFIGFILE VALUE



##########################################################
# SET_VELOCITY_LIMIT
##########################################################
# Custom SET_VELOTITY_LIMIT -> Now the speed and accel params passed to command do not exceed the printer limits (configured in printer.cfg)
# minimum_cruise_ratio and square_corner_velocity don't have limitation for now
[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: SET_VELOCITY_LIMIT_BASE
gcode:
    {% set config_max_velocity = printer.configfile.settings.printer.max_velocity|float %}
    {% set config_max_accel = printer.configfile.settings.printer.max_accel|float %}

    # Set max velocity
    {% if params.VELOCITY is defined %}
        {% if params.VELOCITY|float <= config_max_velocity %}
            {% set velocity = params.VELOCITY|float %}
        {% else %}
            {% set velocity = config_max_velocity %}
        {% endif %}
    {% elif printer.toolhead.max_velocity|float <= config_max_velocity %}
        {% set velocity = printer.toolhead.max_velocity|float %}
    {% else %}
        {% set velocity = config_max_velocity %}
    {% endif %}

    # Set max acceleration
    {% if params.ACCEL is defined %}
        {% if params.ACCEL|float <= config_max_accel %}
            {% set accel = params.ACCEL|float %}
        {% else %}
            {% set accel = config_max_accel %}
        {% endif %}
    {% elif printer.toolhead.max_accel|float <= config_max_accel %}
        {% set accel = printer.toolhead.max_accel|float %}
    {% else %}
        {% set accel = config_max_accel %}
    {% endif %}

    # Set minimum_cruise_ratio
    {% if params.MINIMUM_CRUISE_RATIO is defined %}
        {% set minimum_cruise_ratio = params.MINIMUM_CRUISE_RATIO|float %}
    {% else %}
        {% set minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
    {% endif %}

    # Set square_corner_velocity
    {% if params.SQUARE_CORNER_VELOCITY is defined %}
        {% set square_corner_velocity = params.SQUARE_CORNER_VELOCITY|float %}
    {% else %}
        {% set square_corner_velocity = printer.toolhead.square_corner_velocity %}
    {% endif %}

    SET_VELOCITY_LIMIT_BASE VELOCITY={velocity} ACCEL={accel} MINIMUM_CRUISE_RATIO={minimum_cruise_ratio} SQUARE_CORNER_VELOCITY={square_corner_velocity}






#-------------------------------------------------------TEMPERATURE CONTROL AND MULTIPLE LAYER FANS - REPLACING M104, M109 AND M190 COMMANDS M106 AND M107 -----------------------------------------------------------# 
###################################################################
# SET_HEATER_TEMPERATURE
###################################################################
# This macro is redefined in order to ensure that if heater is "extruder" or "extruder1", it aplies also to its auxiliar heater
#IMPORTANT NOTE: TEMP OFFSET TO SET TO AUXILIAR HEATER IS DEFINED IN THE EXTRUDER SECTION! as "aux_temp_offset"
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
    {% set heater = params.HEATER|string %}
    {% set target = params.TARGET|float %}
    {% set temp_offset = printer.configfile.settings.extruder.aux_temp_offset %}
    
    {% if heater != "extruder" or heater != "extruder1" %}
        SET_HEATER_TEMPERATURE_BASE HEATER={heater} TARGET={target}
    {% elif heater == "extruder" %}
        SET_HEATER_TEMPERATURE_BASE HEATER=extruder TARGET={target}
        SET_HEATER_TEMPERATURE_BASE HEATER=auxiliar_T0_heater TARGET={target + temp_offset}
    {% elif heater == "extruder1" %}
        SET_HEATER_TEMPERATURE_BASE HEATER=extruder1 TARGET={target}
        SET_HEATER_TEMPERATURE_BASE HEATER=auxiliar_T1_heater TARGET={target + temp_offset}
    {% endif %}

###################################################################
# M104 - HEAT AND WAIT
###################################################################
[gcode_macro M104]
# This macro is redefined in order that its commands apply to both extruders if copy or mirror mode is enabled.
#IMPORTANT NOTE: TEMP OFFSET TO SET TO AUXILIAR HEATER IS DEFINED IN THE EXTRUDER SECTION! as "aux_temp_offset" and in the case of M104 command for CUBE, it is programmed in klipper/klippy/kinematics/extruder.py 
rename_existing: M99104
gcode:
    {% set s = params.S|float %}  # The target temperature for the extruder
    {% set ext = params.T|default("active") %}  # The extruder selection, defaulting to the active one

    # If params T0 or T1 have not been defined and not in copy or mirror, just call M104 as normal. If in copy or mirror, call M104 for both extruders. If T0 or T1 defined, just call M104 T0 or M104 T1
    {% if ext == "active" %}
        {% if printer.dual_carriage.carriage_1 != "COPY" and printer.dual_carriage.carriage_1 != "MIRROR" %}
            M99104 S{s}
        {% else %}
            M99104 S{s} T0
            M99104 S{s} T1
        {% endif %}
    {% elif ext == "0" %}
        M99104 S{s} T0
    {% elif ext == "1" %}
        M99104 S{s} T1
    {% endif %}

    # This is added for CUBE -> Heat also the auxiliar heater of extruder!
    

             
###################################################################
# M109 - HEAT AND WAIT
###################################################################

[gcode_macro M109]
# This macro replaces the default M109 behavior, which waits for the extruder to heat up and stabilize.
# In this version, the macro only waits until the extruder reaches the target temperature, without stabilization.
# Also, it only waits when actual temperature is lower than target temperature.
rename_existing: M99109  # Rename the original M109 command to avoid conflicts
gcode:

    # Parameters
    {% set s = params.S|float %}  # The target temperature for the extruder
    {% set ext = params.T|default("active") %}  # The extruder selection, defaulting to the active one

    # Determine the name of the active extruder if parameter T is not provided
    {% if ext == "active" %}
        {% set extruder_name = printer.toolhead.extruder %}
    {% elif ext == "0" %}
        {% set extruder_name = "extruder" %}
    {% elif ext == "1" %}
        {% set extruder_name = "extruder1" %}
    {% endif %}

    # Get the current temperature of the active extruder (or extruder 0 or 1)
    {% set current_temp = printer[extruder_name].temperature %}

    # Set the target temperature for the selected extruder
    # If the current temperature is lower than the target, wait for it to reach the target temperature
    # The 5¬∫C offset is placed because it is considered not necessary to wait when the diference between target and actual temperature is about 5¬∫C
    {% if ext == "active" %}
        {% if printer.dual_carriage.carriage_1 != "COPY" and printer.dual_carriage.carriage_1 != "MIRROR" %}
            M104 S{s}  ; Set the temperature for the active extruder
            {% if (current_temp + 5) < s %}
                TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={s-5} MAXIMUM={s+5}  # Wait until the target temperature is reached within a margin of 10¬∫C
            {% endif %}
        {% else %}
            M104 S{s} T0
            M104 S{s} T1
            {% if (current_temp + 5) < s %}
                TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-5} MAXIMUM={s+5}
                TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={s-5} MAXIMUM={s+5}
            {% endif %}
        {% endif %}
    {% elif ext == "0" %}
        M104 S{s} T0  ; Set the temperature for extruder 0
        {% if (current_temp + 5) < s %}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-5} MAXIMUM={s+5}  # Wait for extruder 0 to reach the target temperature within a margin of 10¬∫C
        {% endif %}
    {% elif ext == "1" %}
        M104 S{s} T1  ; Set the temperature for extruder 1
        {% if (current_temp + 5) < s %}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={s-5} MAXIMUM={s+5}  # Wait for extruder 1 to reach the target temperature within a margin of 10¬∫C
        {% endif %}
    {% endif %}

###################################################################
# M190 - HEAT AND WAIT (BED)
###################################################################
# This macro replaces M190 to heat the bed and wait for it to reach the target temperature.
# It only waits if the current bed temperature is below the target temperature.
# Also, it only waits when actual temperature is lower than target temperature.
[gcode_macro M190]
rename_existing: M99190  # Rename the original M190 command to avoid conflicts
gcode:
    # Parameters
    {% set s = params.S|float %}  # The target bed temperature

    # Get the current bed temperature
    {% set current_temp = printer.heater_bed.temperature %}

    # Set the target temperature for the bed
    M140 S{s}  ; Set the target temperature for the bed

    # Wait if the current temperature is below the target
    {% if (current_temp + 2) < s %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+2}  ; Wait until the bed reaches the target temperature
    {% endif %}


#-------------------------------------------------------REDEFINITION OF M106 AND M107-----------------------------------------------------------#

# Custom fan control is added because Klipper only supports controlling one layer fan defined as [fan].
# This limitation is discussed in: https://klipper.discourse.group/t/idex-parts-cooling-fan-turned-off/2160
# These macros allow control of multiple part cooling fans, activating the appropriate fan based on the active extruder.
# The slicer always calls T0 or T1 before printing, setting the variable target_fan, allowing M106 to control the desired fan.

# Definition of variables for managing multiple part cooling fans.
[gcode_macro FAN_VARIABLE]
gcode:
variable_active_fan: 0  # Default active fan is 0 (can be adjusted based on T0/T1 selection).

###################################################################
# M106 - ACTIVATE FANS IN IDEX
###################################################################
[gcode_macro M106]
# This macro overrides the "M106" command to allow control of multiple extruder fans in an IDEX setup.
# It dynamically selects the correct fan based on the extruder in use or based on the P parameter passed.
gcode:

    {% set fan_vars = printer["gcode_macro FAN_VARIABLE"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}  # Convert fan speed from 0-255 range to percentage (0-1)

    # Select the target fan based on parameter P or the currently active fan
    # This allows the correct fan to be activated for the active extruder.
    {% set target_fan = params.P|default(fan_vars.active_fan)|int %}

    # Control the fan speed for the active extruder or based on the P parameter.
    # This ensures the correct fan is activated during printing, depending on the active extruder or mode.
    {% if target_fan in [0,1,2,3,4] %}
        ### Controls the print fan for the active carriage or both for mirror/duplication mode.
        CARRIAGE_PRINT_FAN SPEED={fan_speed} TARGET={target_fan}
    {% endif %}



[gcode_macro M107]
# This macro overrides the default M107 command to allow control of multiple extruders in an IDEX setup.
# It uses the fan control system to turn off the active fan for the current extruder, or the fan specified by parameter P.
gcode:

    {% set fan_vars = printer["gcode_macro FAN_VARIABLE"] %}
    {% set target_fan = params.P|default(fan_vars.active_fan)|int %} 
    M106 S0 P{target_fan}  # Turns off the active fan by setting its speed to 0 (equivalent to M107).


###################################################################
# CARRIAGE_PRINT_FAN - ACTIVATION OF FANS IN IDEX
###################################################################
[gcode_macro CARRIAGE_PRINT_FAN]
# This macro automatically sets the print fan speed for different operating modes.
# It selects the correct fan and sets the speed based on the active extruder or the target fan specified.
# This macro is called via M106 and M107 commands and in the activation of extruders, via T0,T1, and mirror and copy modes
gcode:

    {% set fan_vars = printer["gcode_macro FAN_VARIABLE"] %}

    # Determine the target fan based on parameters or use the default active fan
    {% if params.TARGET is defined %}
        {% set target_fan = params.TARGET|int %}
    {% else %}
        {% set target_fan = fan_vars.active_fan %}
    {% endif %}
    
    # Set the fan speed if provided, otherwise retrieve the current speed of the target fan
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}  # Use the provided speed if available
    {% else %} 
        # If no speed is provided, get the current speed of the selected fan
        {% if target_fan == 0 %}
            {% set fan_speed = printer["fan_generic ventilador_capa_T0"].speed|float %}
        {% elif target_fan == 1 %}
            {% set fan_speed = printer["fan_generic ventilador_capa_T1"].speed|float %}
        # Possible part cooling fan for extra cooling purposes
        #{% elif target_fan == 2 %}
            #{% set fan_speed = printer["fan_generic cooling_part"].speed|float %}
        # Air extractor fan 
        {% elif target_fan == 3 %}
            {% set fan_speed = printer["fan_generic ventilador_extractor"].speed|float %}
        ### For mirror or duplication mode, set the maximum speed between the fans of T0 and T1.
        {% elif target_fan == 4 %}
            {% set fans_T0_speed = printer["fan_generic ventilador_capa_T0"].speed|float %}
            {% set fans_T1_speed = printer["fan_generic ventilador_capa_T1"].speed|float %}
            {% set fan_speed = [fans_T0_speed, fans_T1_speed]|max %}  # Use the maximum speed between T0 and T1 fans.
        {% else %}
            # If no valid target fan is found, set the fan speed to 0 for safety.
            {% set fan_speed = 0 %}
        {% endif %}
    {% endif %}

    # Activate the appropriate fans based on the selected target fan.
    {% if target_fan == 0 %}
        ### Fans on carriage X1 (extruder T0).
        SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED={fan_speed}  # Activate the left fan of T0.
    {% elif target_fan == 1 %}
        ### Fans on carriage X2 (extruder T1).
        SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED={fan_speed}  # Activate the left fan of T1.
    {% elif target_fan == 2 %}
        ### Possible auxiliary fan for part cooling
    {% elif target_fan == 3 %}
        ### Air extractor fan
        SET_FAN_SPEED FAN=ventilador_extractor SPEED={fan_speed}  # Activate the air extractor fan
    {% elif target_fan == 4 %}
        ### Fans on both carriages for mirror/duplication mode.
        SET_FAN_SPEED FAN=ventilador_capa_T0 SPEED={fan_speed}  # Activate all fans for T0 and T1.
        SET_FAN_SPEED FAN=ventilador_capa_T1 SPEED={fan_speed}
    {% endif %}