# CONSIDERATIONS WHEN USING VARIABLES IN MACROS IN DIFFERENT WAYS:
# Variable definitions:
#      1. Define a variable in the [gcode_macro] block:
#             - It is defined as a persistent macro-level variable.
#             - It is available throughout the macro and its value can be modified.
#             - Example:
#             [gcode_macro CHANGE_NOZZLE_PROCEDURE]
#             extruder_variable: 0
#
#      2. Define a variable within the macro using Jinja:
#             - A local runtime variable is defined.
#             - Uses dynamic parameters, with the option of default values.
#             - The variable only exists within the block where it is defined.
#             - Example:
#             {% set extruder = params.EXTRUDER|default(0)|int %}
#             - Another example:
#             {% set extruder_target = printer.toolhead.extruder.target %}
#
# Use of  variables
#      1. Use of SET_GCODE_VARIABLE:
#             - Allows defining or modifying a macro's variable externally.
#             - Useful for dynamically changing values from other macros or G-code.
#             - The variable persists between macro calls.
#             - Example:
#             SET_GCODE_VARIABLE MACRO=CHANGE_NOZZLE_PROCEDURE VARIABLE=extruder VALUE=1
#      
#             WARNING ¡¡¡USAGE OF STRING VARIABLES!!!
#             The code tries to interpret the value given to SET_GCODE_VARIABLE as a python literal, so if you want to give it a string it needs to be written like a python string literal (enclosed in quotes):
#             SET_GCODE_VARIABLE MACRO=TEST VARIABLE=v VALUE='"value"'
#
#      2. Use of any other variable:
#             - One can use any other variable at any time inside the code in order to get the value of something , modify it or do actions in base of its value
#             - Local variables can also take the value of the persistent variables
#             - Example:
#              {% set pump_fail_count = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].stop_count_pump %}
#              {% set pump_fail_count = pump_fail_count + 1 %}
#



# TYPICAL FLOW WHEN USING MACROS:
#      1. Define persistent variables in the macro itself or in a external macro made for this purpose (e.g. _PRINT_VARIABLE is a macro created in order to define persistent variables for custom pause, cancel and resume procedures):
#              [gcode_macro macro...]
#              variable_my_variable: 0
#              gcode:
#      2. When starting the macro, usually before taking any action, get the printer status by defining local variables that get the value of desired parameters or even the value of these persistent variables:
#              {% set extruder = params.EXTRUDER|default(0)|int %}
#              {% set pump_fail_count = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].stop_count_pump %}
#              ...
#      3. Do actions inside the macro, using the local variables now defined
#              {% if (pump_active > 0 or extruders_temp > 60)  and (pump_forced == 0) %}
#                     do something
#              {% endif %}
#      4. Save, if neccesary, the value of some local variables in the persistent variables
#               {% if (pump_active > 0 or extruders_temp > 60)  and (pump_forced == 0) %}
#                    {% if pump_rpm < (min_rpm * 2) %}
#                     # Increment the failure count if the RPM is below the acceptable range.
#                     SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_pump VALUE={pump_fail_count + 1}
#
#      * Steps 3 & 4 can be swapped (it is not composery to save the persistent variables at the end of the macro, it can be in the middle of the macro)




# WARNING!!!! The value of the variables used in the macros: IS THE VALUE AT THE MOMENT THE MACRO IS ENTERED, NOT THE CURRENT VALUE
# THAT IS, IF WITHIN A MACRO WE MAKE A DELAY AND WANT TO GET THE VALUE OF A VARIABLE AFTER THAT DELAY, WE DO NOT GET THE CURRENT VALUE BUT THE ONE THAT WAS PRESENT WHEN ENTERING THE MACRO
# TO AVOID THIS TYPE OF CONFLICTS, IT IS RECOMMENDED TO CALL A DIFFERENT MACRO AT THAT MOMENT
#
# Example:
# DO NOT DO THIS:
# [gcode_macro A_MACRO]
# gcode:
# ... some actions
# G1 P1000 (Delay)
# {% set variable = printer.whatever %}  <- One can thing that variable is accesing to the actual printer.whatever value, but it is not true. Its value is the one when accesing the macro
# {% if variable == 15 %}
#      do something
#
# INSTEAD, DO THIS:
# [gcode_macro A_MACRO]
# gcode:
# ... some actions
# G1 P1000 (Delay)
# THE_OTHER_MACRO
#
#[gcode_macro THE_OTHER_MACRO]
# gcode:
# {% set variable = printer.whatever} <- As we have accesed the macro at this point, now variable has the actual printer.whatever value
# {% if variable == 15 %}
#     do something



# NOTE: The language of almost all macros names and variables is english. Only the name of macros that the user should can see has been translated to spanish.
# Also, the desired macros can be hidden from User Interface in mainsail or klipperscreen config.
# Also, these can be hidden preceding them by a _   For example, _PRINT_VARIABLE is never shown as it is preceded by a _
# but this last, makes them absolutelly invisible for users (these aren't showed even in the UI config)