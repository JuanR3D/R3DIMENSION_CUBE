# This file contains all the security checks of elements that need a supervision of their alarms status.
# For example, it controls all the actions to do when a motor alarm is detected, the supervision of the refrigeration, and many other security checks such ass door status, magnetic bed...
# This file doesn't support the filament fails. That is done in filament management

###################################################################
# CHECK DOOR
###################################################################
[gcode_macro _DOOR_STATUS]
# Gcode variable in order to get doors status as they only work by triggers and don't stay in the level
# The actual wiring makes that if one of the doors remains closed, even opening the other, the status of the input is closed as one of them is still detecting.
# Neverthless, when activating the sensor, a small current goes trhough the board, polarizing the transistors, so the board detects the trigger anyways
# In order to save this trigger status, this variable is created
variable_door_status: 0
gcode:

[gcode_macro DOOR_OPENED]
# Pauses the print if the door is opened.
# This macro is designed to pause the print immediately when the door is opened
# to ensure safety and prevent any interruptions or external contamination during printing.
gcode:
    SET_GCODE_VARIABLE MACRO=_DOOR_STATUS VARIABLE=door_status VALUE=0
    {% if printer.print_stats.state == "printing" %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'DOOR_OPENED'"
        PAUSE # Pauses the print job to prevent further actions until the door is closed.
        DOOR_OPENED_PROMPT
    {% endif %}


[gcode_macro DOOR_CLOSED]
# Notifies when the door is closed and ready to resume.
# This macro should be triggered once the door is closed, allowing the user 
# to safely resume the print.
gcode:
    SET_GCODE_VARIABLE MACRO=_DOOR_STATUS VARIABLE=door_status VALUE=1
    {% if printer.pause_resume.is_paused %}
        DOOR_CLOSED_PROMPT  # Informs the user that the print can be resumed safely.
    {% endif %}



###################################################################
# CHECK MAGNETIC BED
###################################################################
[gcode_macro MAGNETIC_BED_ACTIVATED]
# Allows resuming the print if the magnetic bed is activated.
# The print will only resume if the magnetic bed is properly seated, ensuring that the part adheres correctly to the bed.
gcode:

    {% if printer.pause_resume.is_paused %}
        MAGNETIC_BED_ACTIVE_PROMPT  # Notifies the user that the magnetic bed is active and the print can continue.
    {% endif %}


[gcode_macro MAGNETIC_BED_DEACTIVATED]
# Pauses the print if the magnetic bed is deactivated.
# This ensures that the print does not continue if the magnetic bed is removed or not in place, preventing layer shifts or part dislocation.
gcode:

    {% if printer.print_stats.state == "printing" %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'MAGNETIC_BED'"
        PAUSE # Pauses the print job to avoid issues caused by the lack of magnetic bed.
        MAGNETIC_BED_INACTIVE_PROMPT # Alerts the user to check the magnetic bed.
    {% endif %}


###################################################################
# XY MOTOR FAILURE
###################################################################
[virtual_pins]

[output_pin FALLO_MOTORES]  # Virtual pin to signal a motor failure
pin:virtual_pin:fail_motors
pwm: False
value:0

[gcode_macro FAIL_XY_PAUSE]
# Handles motor failures in X or Y axes.
# If the print is running, it pauses the job and alerts the user.
# If the printer is idle, it simply disables the motors.
gcode:
    
    {% if printer.print_stats.state == "printing" %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'FAIL_XY'"
        PAUSE # Pauses the print job if a motor failure is detected during printing.
        FAIL_XY_PRINTING_PROMPT
    {% else %}
        M18  # Disables all motors if not printing.
        FAIL_XY_PROMPT  # Prompts the user about the motor failure.
    {% endif %}
    SET_PIN PIN=FALLO_MOTORES VALUE=1.00


# Alarm reset - Please note that only encoder tracking position alarms can be reset by software, any other alarms will require a controller shutdown.
[gcode_macro RESETEAR_ALARMA_MOTORES]
# Resets the alarm, activating a pin which is connected to the rst pin of all drivers. After, it turns off this pin
gcode:

    SET_PIN PIN=_PIN_RESET_ALARMA_MOTOR VALUE=1
    G4 P200 # Wait 0.2 seconds to ensure motors are reset
    SET_PIN PIN=_PIN_RESET_ALARMA_MOTOR VALUE=0 
    # Wait other 0.2 seconds 
    G4 P200
    # Call to check_motor_status in order to save in the virtual pin the status of the alarm after the reset -> Useful in order to know in resume macro the status of motor alarm (remember the usage of variables and object status in klipper)
    CHECK_MOTOR_STATUS
    G4 P200
    CHECK_MOTOR_STATUS

[gcode_macro CHECK_MOTOR_STATUS]
# Checks the status of the alarms of motors and saves its state in the pin  -> It is called from resetear_alarma_motores but also in the release gcode of gcode_buttons that handle these signals
gcode:
    {% set alarm_xy_status = printer["gcode_button alarma_xy"].state %}
    {% set alarm_z_status = printer["gcode_button alarma_z"].state %}
    {% if alarm_xy_status == "PRESSED" or alarm_z_status == "PRESSED" %}
        SET_PIN PIN=FALLO_MOTORES VALUE=1.0
    {% else %}
        SET_PIN PIN=FALLO_MOTORES VALUE=0.0
    {% endif %}

# This is executed when restarting the machine in order to reset the motors
[delayed_gcode RESET_ALARM_MOTORS]
initial_duration: 0.1
gcode:
  RESETEAR_ALARMA_MOTORES

[gcode_macro FAIL_XY_AND_HOME]
# Attempts to reset the motors and the homes X Y axes (created in order to avoid errors when the user just presses home x y, expecting the motors to move automatically)
gcode:
    RESETEAR_ALARMA_MOTORES
    CHECK_MOTOR_STATUS
    G28 X Y


    
###################################################################
# Z MOTOR FAILURE
###################################################################
[gcode_macro FAIL_Z_CANCEL]
# Handles motor failures in the Z axis.
# Cancels the print if the failure occurs during printing, otherwise just disables the motors.
gcode:

    {% if printer.print_stats.state == "printing" %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'FAIL_Z'"
        M18  # Disables all motors in case of a Z motor failure.
        CANCEL_PRINT  # Cancels the current print job to prevent further issues.
        FAIL_Z_PROMPT  # Notifies the user about the Z motor failure.
    {% else %}
        M18  # Disables motors when not printing.
        FAIL_Z_PROMPT  # Notifies the user about the Z motor failure.
    {% endif %}



###################################################################
# POWER SUPPLY FAILURE
###################################################################
[gcode_macro FAIL_DRIVERS_POWER_SUPPLY]
gcode:
    M18 # Disable motors
    M104 S0 T0 # Turn off heaters
    M104 S0 T1 
    
    {% if printer.print_stats.state == "printing" %}
        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'FAIL_DRIVERS_POWER_SUPPLY'"
        PAUSE
    {% endif %}
    
    RESPOND TYPE=command MSG="action:prompt_end"  
    RESPOND TYPE=command MSG="action:prompt_begin Fallo en Motores"
    RESPOND TYPE=command MSG="action:prompt_text Se ha detectado un fallo en la fuente de alimentación de los motores. Se han detenido todas operaciones en marcha"
    RESPOND TYPE=command MSG="action:prompt_footer_button Cerrar esta pestaña|RESPOND TYPE=command MSG=\"action:prompt_end\"|error"
    RESPOND TYPE=command MSG="action:prompt_show"




#-------------------------------------------------------LIQUID COOLING CONTROL-----------------------------------------------------------# 
###################################################################
# VIRTUAL PINS DEFINITION TO SHOW THE COOLING STATUS
###################################################################
# These virtual pins are used to indicate the status of the cooling system to the user in the UI (via "pins" in klipperscreen or "varios or miscelaneous" in mainsail web interface.
# Also, in order to know the status of these elements, some variables have been defined and can be used in any other macros
# The pins will signal any failure in the pump or fans to allow quick action.
[virtual_pins]

[output_pin FALLO_BOMBA]  # Virtual pin to signal a pump failure
pin:virtual_pin:fail_pump
pwm: False
value:0

[output_pin FALLO_VENTILADORES]  # Virtual pin to signal a fan failure
pin:virtual_pin:fail_fan
pwm: False
value:0 


###################################################################
# DELAYED MACRO FOR COOLING SYSTEM CHECK
###################################################################

[delayed_gcode _REFRIGERATION_CHECK]
# This system manages the liquid cooling, ensuring that the pumps and fans
# are functioning correctly based on the extruder temperatures.
initial_duration: 5  # Start the check 5 seconds after startup.
gcode:
   
    _REFRIGERATION_SPEED_CHECK  # Checks the extruder temperatures and adjusts the cooling system.
    UPDATE_DELAYED_GCODE ID=_REFRIGERATION_CHECK DURATION=2  # Repeat the check every two seconds.

[delayed_gcode _EXTRUDERS_TARGET_CHECK]
# This system manages the liquid cooling, ensuring that the pumps and fans
# are functioning correctly based on the extruder temperatures.
initial_duration: 5  # Start the check 5 seconds after startup.
gcode:

    _EXTRUDERS_TEMP_CHECK # Checks if some extruder has a target > 0 and some of these elements are disabled
    UPDATE_DELAYED_GCODE ID=_EXTRUDERS_TARGET_CHECK DURATION=2  # Repeat the check every two seconds.

[gcode_macro _EXTRUDERS_TEMP_CHECK]
# This macro checks if any extruder has a target temperature > 0, while the pump or fans have a target temperature of 0 or > 60 °C.
# It saves the extruder target, sets it to 0, and prompts the user to decide how to proceed.

variable_evaluation_control: 1  # If 1, the macro is evaluated. If 0, the evaluation is skipped.
variable_last_extruder0_target: 0  # Store the last target temperature for extruder 0.
variable_last_extruder1_target: 0  # Store the last target temperature for extruder 1.

gcode:
    {% set extruder0_target = printer.extruder.target %}
    {% set extruder1_target = printer.extruder1.target %}
    {% set pump_target = printer["temperature_fan _bomba_refrigeracion"].target %}
    {% set fans_target = printer["temperature_fan _ventiladores_refrigeracion"].target %}
    
    {% if printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].evaluation_control == 1 %}    
        # Check if any extruder has a target temperature greater than 0
        {% if extruder0_target > 0 or extruder1_target > 0 %}
            # If the pump or fans have a target outside the acceptable range, save the extruder targets and notify the user.
            {% if pump_target == 0 or pump_target > 60 or fans_target == 0 or fans_target > 60 %}
                # Save the current extruder targets for possible restoration later
                SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=last_extruder0_target VALUE={extruder0_target}
                SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=last_extruder1_target VALUE={extruder1_target}
                
                # Set the extruder temperatures to 0 for safety
                SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
                SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0

                NO_TARGET_COOLING_PROMPT  
            {% endif %}
        {% endif %}
    {% endif %}

    # Restores the evaluating system when the client sets a target of 0 (just in case the client has forgotten to restart this system)
    {% if extruder0_target == 0 and extruder1_target == 0 %}
        {% if printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].evaluation_control == 0 %}
            RESPOND TYPE=echo MSG="Se ha restablecido automaticamente la comprobación de seguridad de la consigna de extrusores"
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=evaluation_control VALUE=1
    {% endif %}
        

[gcode_macro ABORT_EXTRUDER_TARGET]
gcode:
    # Restore the pump and
    RESPOND TYPE=command MSG="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=evaluation_control VALUE=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  
    RESPOND TYPE=echo MSG="Se ha abortado el calentamiento del extrusor y se ha activado el sistema de refrigeración"

[gcode_macro CONTINUE_WITH_COOLING]
gcode:
    # Reactivate pump and fans, then restore extruder temperatures
    RESPOND TYPE=command MSG="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=evaluation_control VALUE=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].last_extruder0_target}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].last_extruder1_target}
    RESPOND TYPE=echo MSG="Refrigeración activada y temperaturas de extrusores restauradas."
    
[gcode_macro CONTINUE_NO_COOLING]
gcode:
    # Restore extruder temperatures without reactivating pump and fans
    RESPOND TYPE=command MSG="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_EXTRUDERS_TEMP_CHECK VARIABLE=evaluation_control VALUE=0
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].last_extruder0_target}
    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={printer["gcode_macro _EXTRUDERS_TEMP_CHECK"].last_extruder1_target}
    RESPOND TYPE=echo MSG="Temperaturas de extrusores restauradas sin activar la refrigeración."




###################################################################
# PROCEDURE FOR DETECTING COOLING SYSTEM FAILURES
###################################################################
[gcode_macro _REFRIGERATION_SPEED_CHECK]
# This macro checks the RPMs of the pump and fans and detects any failures.
# It also ensures that the extruders and these elements are powered off if the cooling system fails (only if force_pump or force_fan are not set to 1).
variable_pump_error : 0 # pump_error shows the status of the pump, if 0, it works propperly, if 1, a fail has been detected
variable_fan_error : 0 # fan _error shows the status of the fans, if 0, they work propperly, if 1, a fail has been detected
variable_stop_count_pump: 0  # Initialize the pump stop count to 0.
variable_stop_count_fans: 0  # Initialize the fan stop count to 0.
variable_force_pump: 0  # Force the pump to remain active even if in error state if set.
variable_force_fan: 0  # Force the fans to remain active even if in error state  if set.
variable_last_extruder0_target: 0  # Store the last target temperature for extruder 0.
variable_last_extruder1_target: 0  # Store the last target temperature for extruder 1.
variable_pump_error_notified: 0  # Track if the pump failure has already been notified.
variable_fans_error_notified: 0  # Track if the fan failure has already been notified.
gcode:
    {% set pump_min_rpm = 1000 %}  # Define the minimum safe RPM for the pump 
    {% set fans_min_rpm = 500 %}  # Define the minimum safe RPM for the fans 
    {% set pump_rpm = printer["temperature_fan _bomba_refrigeracion"].rpm %}  # Get the actual RPM of the cooling pump.
    {% set fans_rpm = printer["temperature_fan _ventiladores_refrigeracion"].rpm %}  # Get the actual RPM of the cooling fans.
    {% set pump_active = printer["temperature_fan _bomba_refrigeracion"].speed %}  # Get the expected speed of the pump.
    {% set fans_active = printer["temperature_fan _ventiladores_refrigeracion"].speed %}  # Get the expected speed of the fans.
    {% set pump_target = printer["temperature_fan _bomba_refrigeracion"].target %}  # Get the temperature target of the pump.
    {% set fans_target = printer["temperature_fan _ventiladores_refrigeracion"].target %}  # Get the temperature target of the fans.
    {% set pump_fail_count = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].stop_count_pump %}  # Count consecutive pump failures.
    {% set fans_fail_count = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].stop_count_fans %}  # Count consecutive fan failures.
    {% set pump_forced = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_pump %}  # Get the saved value to force the pump on.
    {% set fans_forced = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_fan %}  # Get the saved value to force the fans on.
    {% set extruder0_target = printer.extruder.target %}  # Get the target temperature for extruder 0.
    {% set extruder1_target = printer.extruder1.target %}  # Get the target temperature for extruder 1.
    {% set extruders_target = [extruder0_target, extruder1_target]|max %}  # Get the maximum temperature target between both extruders.
    {% set extruder0_temperature = printer.extruder.temperature %}  # Get the current temperature of extruder 0.
    {% set extruder1_temperature = printer.extruder1.temperature %}  # Get the current temperature of extruder 1.
    {% set extruders_temp = [extruder0_temperature, extruder1_temperature]|max %}  # Get the maximum temperature between both extruders.

    # PUMP CHECK
    
    # Check if the pump is active and if the RPM is within a safe range.
    {% if pump_target > 0 %}
    
        # This is only checked if the pump is not disabled and if it's active or the extruder temperature is high.
        {% if (pump_active > 0 or extruders_temp > 60)  and (pump_forced == 0) %}
            {% if pump_rpm  < (pump_min_rpm) or printer["output_pin FALLO_BOMBA"].value == 1 %}
                # Increment the failure count if the RPM is below the acceptable range or if FALLO_BOMBA=1 as the user can also control this variable
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_pump VALUE={pump_fail_count + 1}
                
                # If the failure count reaches 3, turn off the extruders and pump and alert the user.
                {% if pump_fail_count >= 5 %}     
                    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=0  # Turn off the pump for safety by setting the target to 0.
                    SET_PIN PIN=FALLO_BOMBA VALUE=1.00  # Set the virtual pin to indicate a pump failure.
                    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error VALUE=1 # Set the variable in order to indicate a pump failure
    
                    {% if extruder0_target != 0 %}
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=last_extruder0_target VALUE={extruder0_target}  # Save the last target temperature for extruder 0.
                        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder0_target VALUE={extruder0_target}
                    {% endif %}
                    {% if extruder1_target != 0 %}
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=last_extruder1_target VALUE={extruder1_target}  # Save the last target temperature for extruder 1.
                        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=extruder1_target VALUE={extruder1_target}
                    {% endif %}

                    # Always pause and show the prompt the print if it is printing, if not, only when the error hasn't been notified
                    {% if printer.print_stats.state == "printing" %}
                        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'FAIL_PUMP'"
                        PAUSE  # Pause the print job.
                        FAIL_PUMP_PRINTING_PROMPT # Show the pump failure prompt during printing.
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error_notified VALUE=1

                    {% elif pump_error_notified == 0 %}
                        FAIL_PUMP_PROMPT
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error_notified VALUE=1

                    {% endif %}

                    # Turn off heaters always!
                    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0  # Turn off extruder 0.
                    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0  # Turn off extruder 1.
                    
                    # Also, in order to avoid false fail trigers when it is restarted manually, restart the count 
                    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_pump VALUE=0

                {% endif %}
                
            {% else %}
                # If the RPM is safe, reset all variables that show error (virtual pin isn't reset, this only happens in reset_macros, in order to remember the user something unusual has happened)
                #reset the failure count variable, and the error_notified variable (assuming that if pump is now running, it has been activated manually)
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error VALUE=0 
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_pump VALUE=0
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error_notified VALUE=0
            {% endif %}
        {% endif %}
    {% endif %}
    
    # FAN CHECK

    
    {% if fans_target > 0 %}
        # Check if the fans are activated and if the RPM is within a safe range, only if there is no pump failure.
        {% if (fans_active > 0 or extruders_temp > 60) and (fans_forced == 0) %} 
            {% if fans_rpm < fans_min_rpm or printer["output_pin FALLO_VENTILADORES"].value == 1 %}
                # Increment the failure count if the fan RPM is below the minimum acceptable value.
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_fans VALUE={fans_fail_count  + 1}
        
                # If the failure count reaches 3, turn off the extruders and signal a fan failure.
                {% if fans_fail_count  >= 5 %}
                    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=0  # Turn off the fans for safety by setting the target speed to 0.
                    SET_PIN PIN=FALLO_VENTILADORES VALUE=1.00  # Set the virtual pin to indicate a fan failure.
                    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fan_error VALUE=1 # Set the variable in order to indicate a fan failure
        
                    # Save the last target temperatures for extruder 0 and extruder 1 if they are non-zero.
                    {% if extruder0_target != 0 %}
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=last_extruder0_target VALUE={extruder0_target} 
                    {% endif %}
                    {% if extruder1_target != 0 %}
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=last_extruder1_target VALUE={extruder1_target} 
                    {% endif %}
                  
                    # Always pause and show the prompt the print if it is printing, if not, only when the error hasn't been notified
                    {% if printer.print_stats.state == "printing" %}
                        SET_GCODE_VARIABLE MACRO=_PRINT_VARIABLE VARIABLE=event_mode VALUE="'FAIL_FANS'"
                        PAUSE  # Pause the print job.
                        FAIL_FANS_PRINTING_PROMPT # Show the pump failure prompt during printing.
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fans_error_notified VALUE=1
                    {% elif pump_error_notified == 0 %}
                        FAIL_FANS_PROMPT
                        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fans_error_notified VALUE=1
                        
                    {% endif %}

                    # Turn off heaters allways!!
                    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0  # Turn off extruder 0.
                    SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0  # Turn off extruder 1.

                    
                    # Also, in order to avoid false fail trigers when it is restarted manually, restart the count 
                    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_fans VALUE=0

                {% endif %}
                
            {% else %}
                # If the RPM is safe, reset all variables that show error (virtual pin isn't reset, this only happens in reset_macros, in order to remember the user something unusual has happened),
                # reset the failure count variable, and the error_notified variable (assuming that if fans are now running, they have been activated manually)
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fan_error VALUE=0 
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=stop_count_fans VALUE=0
                SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fans_error_notified VALUE=0
            {% endif %}
        {% endif %}
    {% endif %}



###################################################################
# PUMP RESET - ACTIVATION AND STATUS CHECK
###################################################################
[gcode_macro RESET_BOMBA]
# This macro resets the pump after a failure and checks its status to ensure it operates correctly.
gcode:

    # Reset the pump failure status
    #SET_PIN PIN=FALLO_BOMBA VALUE=0.00
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=0  # Remove the forced pump override
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Reiniciando la bomba y comprobando su estado..."

    # Set a minimal temperature target to force the pump to activate
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=1  # Activate the pump with a minimal target.
    G4 P10000  # Wait 10 seconds to allow RPM to stabilize
    RESET_BOMBA_CHECK  # Call the macro that checks the pump's status

[gcode_macro RESET_BOMBA_CHECK]
gcode:

    {% set min_rpm = 500 %}
    {% set pump_rpm = printer["temperature_fan _bomba_refrigeracion"].rpm %}
    # Check if the pump RPM is below the minimum safe threshold
    {% if pump_rpm < min_rpm %}
        SET_PIN PIN=FALLO_BOMBA VALUE=1.00  # Signal a pump failure
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error VALUE=1
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=0  # Turn off the pump for safety
        
        # Display the appropriate failure message depending on whether the printer is paused or printing
        {% if printer.pause_resume.is_paused %}
            FAIL_PUMP_RESET_PRINTING_PROMPT  # Display pump failure reset prompt during printing
        {% else %}
            FAIL_PUMP_RESET_PROMPT  # Display pump failure reset prompt when not printing
        {% endif %}
    {% else %}
        SET_PIN PIN=FALLO_BOMBA VALUE=0.00  # Clear the pump failure signal
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=pump_error VALUE=0 
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  # Restore normal pump operation
        # Display the appropriate success message
        {% if printer.pause_resume.is_paused %}
            PUMP_OK_RESET_PRINTING_PROMPT  # Display pump OK reset message during printing
        {% else %}
            PUMP_OK_RESET_PROMPT  # Display pump OK reset message when not printing
        {% endif %}
    {% endif %}


###################################################################
# FAN RESET - ACTIVATION AND STATUS CHECK
###################################################################   
[gcode_macro RESET_VENTILADORES]
# This macro resets the fans after a failure and checks their status to ensure proper operation.
gcode:

    # Reset the fan failure status
    #SET_PIN PIN=FALLO_VENTILADORES VALUE=0.00
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=0  # Remove the forced fan override
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Reiniciando los ventiladores y comprobando su estado..."

    # Set a minimal temperature target to force the fans to activate
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=1  # Activate the fans with a minimal target.
    G4 P10000  # Wait 10 seconds to allow RPM to stabilize
    RESET_VENTILADORES_CHECK  # Call the macro that checks the fans' status

[gcode_macro RESET_VENTILADORES_CHECK]
gcode:

    {% set min_rpm = 500 %}
    {% set ventilador_rpm = printer["temperature_fan _ventiladores_refrigeracion"].rpm %}
    # Check if the fan RPM is below the minimum safe threshold
    {% if ventilador_rpm < min_rpm %}
        SET_PIN PIN=FALLO_VENTILADORES VALUE=1.00  # Signal a fan failure
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fan_error VALUE=1 
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=0  # Turn off the fans for safety
        
        # Display the appropriate failure message depending on whether the printer is paused or printing
        {% if printer.pause_resume.is_paused %}
            FAIL_FANS_RESET_PRINTING_PROMPT  # Display fan failure reset prompt during printing
        {% else %}
            FAIL_FANS_RESET_PROMPT  # Display fan failure reset prompt when not printing
        {% endif %}
    {% else %}
        SET_PIN PIN=FALLO_VENTILADORES VALUE=0.00  # Clear the fan failure signal
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=fan_error VALUE=0
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  # Restore normal fan operation
        # Display the appropriate success message
        {% if printer.pause_resume.is_paused %}
            FANS_OK_RESET_PRINTING_PROMPT  # Display fan OK reset message during printing
        {% else %}
            FANS_OK_RESET_PROMPT  # Display fan OK reset message when not printing
        {% endif %}
    {% endif %}


###################################################################
# MACROS FOR RESUMING PRINT WITH OR WITHOUT PUMP OR FAN SAFETY CONTROL
###################################################################
[gcode_macro RESUME_PRINT_YES_SAFETY_CONTROL_PUMP]
# This macro resumes printing with the pump activated and functioning normally. (note that variable pump_error isn't reset as the virtual pin. this is done in purpose)
gcode:

    SET_PIN PIN=FALLO_BOMBA VALUE=0.00  # Clear the pump failure signal (if a fail is detected, it will automatically revert the change in the next check)
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=0  # Restore normal pump operation
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  # Set the pump to its normal operating speed
    {% set extruder0_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder0_target %}  # Get the last target temperature for extruder 0
    {% set extruder1_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder1_target %}  # Get the last target temperature for extruder 1
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Calentando extrusores. La impresión se reanudará una vez estén calientes."
    M104 S{extruder0_target} T0  # Heat extruder 0
    M104 S{extruder1_target} T1  # Heat extruder 1
    M109 S{extruder0_target} T0  # Wait for extruder 0 to reach temperature
    M109 S{extruder1_target} T1  # Wait for extruder 1 to reach temperature
    RESUME 



[gcode_macro RESUME_PRINT_NO_SAFETY_CONTROL_PUMP]
# This macro resumes printing without the pump control and forces the pump to be bypassed.
gcode:

    SET_PIN PIN=FALLO_BOMBA VALUE=1.00  # Signal a pump failure
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=1  # Force pump bypass
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  # Set the pump to its normal operating speed
    {% set extruder0_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder0_target %}
    {% set extruder1_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder1_target %}
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Calentando extrusores. La impresión se reanudará una vez estén calientes."
    M104 S{extruder0_target} T0
    M104 S{extruder1_target} T1
    M109 S{extruder0_target} T0
    M109 S{extruder1_target} T1
    RESUME  # Resume print and close prompt


[gcode_macro RESUME_PRINT_YES_SAFETY_CONTROL_FANS]
# This macro resumes the print with the fans activated and working normally after a failure.
gcode:

    SET_PIN PIN=FALLO_VENTILADORES VALUE=0.00  # Clear the fan failure signal
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=0  # Restore normal fan operation
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  # Set fans to their normal operating speed
    {% set extruder0_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder0_target %}  # Get the last setpoint of extruder 0
    {% set extruder1_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder1_target %}  # Get the last setpoint of extruder 1
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Calentando extrusores. La impresión se reanudará una vez estén calientes."
    M104 S{extruder0_target} T0  # Heat extruder 0
    M104 S{extruder1_target} T1  # Heat extruder 1
    M109 S{extruder0_target} T0  # Wait for extruder 0 to reach target temperature
    M109 S{extruder1_target} T1  # Wait for extruder 1 to reach target temperature
    RESUME  # Resume printing and close the prompt



[gcode_macro RESUME_PRINT_NO_SAFETY_CONTROL_FANS]
# This macro resumes the print without the fans control, bypassing the fan safety system after a failure.
gcode:

    SET_PIN PIN=FALLO_VENTILADORES VALUE=1.00  # Indicate a fan failure
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=1  # Force fan bypass
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  # Set fans to their normal operating speed
    {% set extruder0_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder0_target %}  # Get the last setpoint of extruder 0
    {% set extruder1_target = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].last_extruder1_target %}  # Get the last setpoint of extruder 1
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="Calentando extrusores. La impresión se reanudará una vez estén calientes."
    M104 S{extruder0_target} T0  # Heat extruder 0
    M104 S{extruder1_target} T1  # Heat extruder 1
    M109 S{extruder0_target} T0  # Wait for extruder 0 to reach target temperature
    M109 S{extruder1_target} T1  # Wait for extruder 1 to reach target temperature
    RESUME  # Resume printing and close the prompt




[gcode_macro RESUME_NO_SAFETY_CONTROL_PUMP]
# This macro continues the operation without the pump control, bypassing the pump safety system.
gcode:

    RESPOND TYPE=command MSG="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=1  # Force pump bypass
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60  # Set the pump to normal operation temperature
    SET_PIN PIN=FALLO_BOMBA VALUE=1.00  # Indicate a pump failure




[gcode_macro RESUME_NO_SAFETY_CONTROL_FANS]   
# This macro continues the operation without the fans control, bypassing the fan safety system.
gcode: 

    RESPOND TYPE=command MSG="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=1  # Force fan bypass
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60  # Set fans to normal operating speed
    SET_PIN PIN=FALLO_VENTILADORES VALUE=1.00  # Indicate a fan failure


###################################################################
# MANUAL ENABLE/DISABLE FOR PUMP OR FAN SAFETY CONTROL SYSTEMS
###################################################################
[gcode_macro HABILITAR_DESHABILITAR_CONTROL_BOMBA]
# This macro toggles the safety control system for the pump (Enable or disable). It does not restart the pump.
gcode:

    {% set pump_forced = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_pump %}  # Get the saved pump bypass state
    {% if pump_forced == 0 %}
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=1  # Disable pump safety control
        RESPOND TYPE=echo MSG="Se ha deshabilitado el control de seguridad de la bomba."
    {% else %}
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_pump VALUE=0  # Enable pump safety control
        RESPOND TYPE=echo MSG="Se ha habilitado el control de seguridad de la bomba."    
    {% endif %}


[gcode_macro HABILITAR_DESHABILITAR_CONTROL_VENTILADORES]
# This macro toggles the safety control system for the fans (Enable or disable). It does not restart the fans.
gcode:

    {% set fans_forced = printer["gcode_macro _REFRIGERATION_SPEED_CHECK"].force_fan %}  # Get the saved fan bypass state
    {% if fans_forced == 0 %}
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=1  # Disable fan safety control
        RESPOND TYPE=echo MSG="Se ha deshabilitado el control de seguridad de los ventiladores."
    {% else %}
        SET_GCODE_VARIABLE MACRO=_REFRIGERATION_SPEED_CHECK VARIABLE=force_fan VALUE=0  # Enable fan safety control
        RESPOND TYPE=echo MSG="Se ha habilitado el control de seguridad de los ventiladores."    
    {% endif %}

[gcode_macro APAGAR_ENCENDER_SISTEMA_REFRIGERACION]
# This macro allows the user to turn on-off the refrigeration system, giving a target of 60ºC or 0ºC.
gcode:
    {% set pump_target = printer["temperature_fan _bomba_refrigeracion"].target %}
    {% set fans_target = printer["temperature_fan _ventiladores_refrigeracion"].target %}

    # If any of the systems is turned on, turn them off, else, turn then on
    {% if pump_target != 0 or fans_target != 0 %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=0
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=0
        RESPOND TYPE=echo MSG="Se ha apagado el sistema de refrigeración"
    {% else %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_bomba_refrigeracion TARGET=60
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=_ventiladores_refrigeracion TARGET=60
        RESPOND TYPE=echo MSG="Se ha encendido el sistema de refrigeración, con una consigna de 60ºC"
    {% endif %}

    
    