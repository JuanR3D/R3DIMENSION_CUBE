

##########################################################
# BED LEVELING - QUAD GANTRY AND BED LEVEL
##########################################################
# This section configure the leveling the of the gantry using the quad gantry method, which adjusts the four support points of the printer's gantry.
[quad_gantry_level]
gantry_corners:
  -160, -40
  1280, 960
  #-168, -36  # Coordinates of the first corner of the gantry.
  #1282, 950  # Coordinates of the opposite corner of the gantry.

  
points:
  100, 100  # First leveling point.
  100, 620  # Second leveling point.
  1020, 620  # Third leveling point.
  1020, 100  # Fourth leveling point.

speed: 800  # Speed of movement during the leveling process.
horizontal_move_z: 10  # Z distance to move up while moving in X/Y to avoid collisions.
max_adjust: 8  # Maximum allowed adjustment distance at each corner for bed leveling.
retries: 3  # Number of retries if the leveling process does not succeed on the first attempt.
retry_tolerance: 0.08  # Tolerance within which the bed is considered sufficiently leveled.


[gcode_macro QUAD_GANTRY_LEVEL]
# This macro handles the quad gantry leveling process by limiting speed and acceleration,
# executing the leveling procedure, and restoring the printer's settings afterward.
rename_existing: QUAD_GANTRY_LEVEL_1  # Renames the existing macro to avoid conflicts.
variable_level_done: 0  # Variable indicating if leveling was completed successfully.
gcode:
    # Get the actual maximum velocity and acceleration values.
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_velocity = printer.toolhead.max_velocity %}

    
    # Limit the velocity and acceleration during leveling to avoid abrupt movements.
    SET_VELOCITY_LIMIT VELOCITY=500
    SET_VELOCITY_LIMIT ACCEL=1000
    
    # Change the printer status to "leveling" (if a status macro is defined).
    {% if printer["gcode_macro status_leveling"] != null %}
        status_leveling
    {% endif %}

    # Execute the bed leveling process. If an error occurs, the process will be canceled.
    QUAD_GANTRY_LEVEL_1 { rawparams }
    SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=level_done VALUE=1  # Mark the leveling as completed.

    # Change the printer status back to "ready" (if a status macro is defined).
    {% if printer["gcode_macro status_ready"] != null %}
        status_ready
    {% endif %}
    
    # Restore the original velocity and acceleration values to continue normal printing.
    SET_VELOCITY_LIMIT VELOCITY={max_velocity}
    SET_VELOCITY_LIMIT ACCEL={max_accel}

######################################################################
# MACRO FOR CALLING BED LEVELING
######################################################################
[gcode_macro NIVELAR_CAMA]
# This macro allows the user to start the quad gantry bed leveling process from the macro tab.
gcode:

    QUAD_GANTRY_LEVEL  # Call the quad gantry leveling macro

# Bed mesh for leveling platform:
[bed_mesh]
# This section configures the default bed mesh metod in order to use it
#Bed besh allows automatic z height adjustments, which adjusts z height automatically when printing according the actual coordinate.
speed: 500  # Speed of movement between points in the bed mesh.
horizontal_move_z: 2  # Safety height when moving horizontally.
mesh_min: 95, 45  # Minimum mesh limits. (X,Y coordinates) 
mesh_max: 1025, 715  # Maximum mesh limits. (X,Y coordinates) 
probe_count: 4, 3  # Number of probing points in X and Y; more points will give a more accurate mesh.

#[bed_mesh]
# This section configures the default bed mesh metod in order to use it
# Bed besh allows automatic z height adjustments, which adjusts z height automatically when printing according the actual coordinate.
#speed: 500  # Speed of movement between points in the bed mesh.
#horizontal_move_z: 2  # Safety height when moving horizontally.
#mesh_min: 0, 0  # Minimum mesh limits. (X,Y coordinates) 
#mesh_max: 1120, 720  # Maximum mesh limits. (X,Y coordinates) 
#probe_count: 5, 5  # Number of probing points in X and Y; more points will give a more accurate mesh.

[gcode_macro BED_MESH_CALIBRATE]
# Modified BED_MESH macro -> Adjusts to the print area
# Credits to ChipCE on github https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    # Get the actual maximum velocity and acceleration values.
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_velocity = printer.toolhead.max_velocity %}

    
    # Limit the velocity and acceleration during leveling to avoid abrupt movements.
    SET_VELOCITY_LIMIT VELOCITY=500
    SET_VELOCITY_LIMIT ACCEL=2000

    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

    
    # Restore the original velocity and acceleration values to continue normal printing.
    SET_VELOCITY_LIMIT VELOCITY={max_velocity}
    SET_VELOCITY_LIMIT ACCEL={max_accel}
