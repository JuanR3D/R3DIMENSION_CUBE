#######################################################
#                                                     #
# File Name: idex_macros.cfg                          #
# Author: Juan Ignacio Muñoz Sánchez                  #
# Creation Date: 2024-10-04                           #
# Company: R3DIMENSION                                #
# Firmware Version: Klipper v0.12.0-316-g96cceed2     #
#                                                     #
# Description:                                        #
# This configuration defines the basic operational    #
# behavior for IDEX (Independent Dual Extruder) mode. #
# Includes macros for extruder activation and parking,#
# and operation modes such as dual, copy, and mirror. #
# The macros manage extruder temperatures, movement   #
# synchronization, and fan control to facilitate      #
# efficient IDEX printing.                            #
#                                                     #
#######################################################

#-------------------------------------------------------IDEX OPERATION MODES AUXILIARY SCRIPTS-----------------------------------------------------------#
###################################################################
# OPERATION MODES FOR IDEX PRINTING
###################################################################
[gcode_macro ESTABLECER_OFFSETS_T1]
gcode:

    {% set actual_x = printer.save_variables.variables.offset_t1_x|default(0.0)|float %}
    {% set actual_y = printer.save_variables.variables.offset_t1_y|default(0.0)|float %}
    {% set actual_y = printer.save_variables.variables.offset_t1_y %}
    {% set offset_x = params.OFFSET_X|default(0.0)|float %}
    {% set offset_y = params.OFFSET_Y|default(0.0)|float %}

    SAVE_VARIABLE VARIABLE=offset_t1_x VALUE={offset_x}
    SAVE_VARIABLE VARIABLE=offset_t1_y VALUE={offset_y}
    
    
[gcode_macro OFFSET_T1]
# Useful in order to save offset between toolhead as orcaslicer still has a problem with offsets and purge tower
# Offsets are calculated as: (Measure_of_T1 - Measure_of_T0) 
# For example, if we use a camera to look at the noozle point, and we get these measures in X axis: T0: 529.87,  T1: 530.85    offset_t1_x will be + 1 mm, 

variable_offset_t1_x : 2.4
variable_offset_t1_y : 0.5
gcode:

[gcode_macro T0]
# Activate main extruder (T0)
gcode:
    # These params are only added if post_process script is executed propperly   EXAMPLE OF USAGE: T0 P1 X500 Y403 Z.2
    {% set printing = params.P|default(0)|int %}
    {% set x_after_toolchange = params.X|default(-1.0)|float %}
    {% set y_after_toolchange = params.Y|default(-1.0)|float %}
    {% set z_after_toolchange = params.Z|default(-1.0)|float %}
    
    {% set print_variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    
    SET_GCODE_OFFSET X=0 Y=0 # Always reset gcode_offsets
    # Proceed with the toolchange of the extruders according to changing mode and if params are defined
    # If printer isn't printing (controlled by param P), do not park and nothing, if it is parking, ensure at least to park, or if params are defined and everything, proceed with the toolchange with the needed mode
    {% if printing == 1 %}
        {% if printer.dual_carriage.carriage_1 == "PRIMARY" and print_variables.enable_dual_toolchange == 1 %} # Only perform _dual_toolchange actual extruder is T1 and if specified by variable
            _DUAL_TOOLCHANGE T=0 X_AFTER_TOOLCHANGE={x_after_toolchange} Y_AFTER_TOOLCHANGE={y_after_toolchange} Z_AFTER_TOOLCHANGE={z_after_toolchange} # Proceed with a syncronized toolchange
        {% else %} # In any other case, do a normal toolchange
            _NORMAL_TOOLCHANGE T=0 X_AFTER_TOOLCHANGE={x_after_toolchange} Y_AFTER_TOOLCHANGE={y_after_toolchange} Z_AFTER_TOOLCHANGE={z_after_toolchange} # Proceed with a no syncronized toolchange
        {% endif %}
    # If printing is not defined, but it is detected that printer is printing, means that gcode hasn't been post processed propperly, or started directly some print, so at least, park extruder in order to avoid colisions
    {% elif printer.print_stats.state == "printing" %} 
        Park_extruder1
    {% endif %}

    # If P isn't defined, and printer isn't printing there is no need to park extruders (it is desired to do in this way so user, when selecting T0 or T1 in extrusion panel, only activates the extruder) 


    # Ensure to activate extruder propperly
    ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Selects extruder carriage 0
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="" # Ensures that extruder1 stops following extruder0 movements
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder stepper follows movements commanded to extruder

    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=0  # Controls extruder 0 fan


[gcode_macro T1]
# Activate the second extruder (T1)
gcode:
    # These params are only added if post_process script is executed propperly
    {% set printing = params.P|default(0)|int %}
    {% set x_after_toolchange = params.X|default(-1.0)|float %}
    {% set y_after_toolchange = params.Y|default(-1.0)|float %}
    {% set z_after_toolchange = params.Z|default(-1.0)|float %}
    

    {% set offset_t1_x = printer.save_variables.variables.offset_t1_x %}
    {% set offset_t1_y = printer.save_variables.variables.offset_t1_y %}
    {% set print_variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    
    SET_GCODE_OFFSET X=0 Y=0 # Always reset gcode_offsets
    # Proceed with the toolchange of the extruders according to changing mode and if params are defined
    # If printer isn't printing (controlled by param P), do not park and nothing, if it is parking, ensure at least to park, or if params are defined and everything, proceed with the toolchange with the needed mode
    {% if printing == 1 %}
        {% if printer.dual_carriage.carriage_0 == "PRIMARY" and print_variables.enable_dual_toolchange == 1 %} # Only perform _dual_toolchange actual extruder is T1 and if specified by variable
            _DUAL_TOOLCHANGE T=1 X_AFTER_TOOLCHANGE={x_after_toolchange} Y_AFTER_TOOLCHANGE={y_after_toolchange} Z_AFTER_TOOLCHANGE={z_after_toolchange} # Proceed with a syncronized toolchange
        {% else %} # In any other case, do a normal toolchange
            _NORMAL_TOOLCHANGE T=1 X_AFTER_TOOLCHANGE={x_after_toolchange} Y_AFTER_TOOLCHANGE={y_after_toolchange} Z_AFTER_TOOLCHANGE={z_after_toolchange} # Proceed with a no syncronized toolchange
        {% endif %}
    # If printing is not defined, but it is detected that printer is printing, means that gcode hasn't been post processed propperly, or started directly some print, so at least, park extruder in order to avoid colisions
    {% elif printer.print_stats.state == "printing" %} 
        Park_extruder
    {% endif %}

    # If P isn't defined, and printer isn't printing there is no need to park extruders (it is desired to do in this way so user, when selecting T0 or T1 in extrusion panel, only activates the extruder) 
    
    
    SET_GCODE_OFFSET X={offset_t1_x} Y={offset_t1_y}   # Offsets are set after the toolhead has been executed
    
    # Ensure to activate extruder1 propperly 
    ACTIVATE_EXTRUDER EXTRUDER=extruder1   # Activates extruder 1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Selects extruder carriage 1
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="" # Ensures that extruder stops following extruder1 movements
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder1" # Ensures that extruder1 stepper follows movements commanded to extruder1

    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=1  # Controls extruder 1 fan




[gcode_macro ELEGIR_T0]
# Selects extruder 0 as the main extruder to move it (without parking the other)
gcode:
    SET_GCODE_OFFSET X=0 Y=0
    ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Selects extruder carriage 0
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="" # Ensures that extruder1 stops following extruder0 movements
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder stepper follows movements commanded to extruder

    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=0  # Controls extruder 0 fan
    

[gcode_macro ELEGIR_T1]
# Selects extruder 1 as the main extruder to move it (without parking the other)
gcode:
    {% set offset_t1_x = printer.save_variables.variables.offset_t1_x %}
    {% set offset_t1_y = printer.save_variables.variables.offset_t1_y %}
    SET_GCODE_OFFSET X={offset_t1_x} Y={offset_t1_y}   # Offsets are set after park_extruder1 has taken place as extruder0 is the primary and has offsets equal to 0
    ACTIVATE_EXTRUDER EXTRUDER=extruder1   # Activates extruder 1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Selects extruder carriage 1
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="" # Ensures that extruder stops following extruder1 movements
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder1" # Ensures that extruder1 stepper follows movements commanded to extruder1


    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=1  # Controls extruder 1 fan
    
        
[gcode_macro ACTIVAR_MODO_COPIA]
# Activate copy mode on the IDEX printer
gcode:
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    SET_GCODE_OFFSET X=0 Y=0
    {% if 'z' in printer.toolhead.homed_axes %}
        G91  # Set to relative movement mode
        G1 Z0.4 F1800  # Raise the head slightly to avoid collisions
        G90  # Return to absolute movement mode
    {% endif %}
    PARK_extruder SPEED={toolchange_speed} # Parks extruder 0
    PARK_extruder1 SPEED={toolchange_speed} # Parks extruder 1
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Sets extruder 0 as primary
    G1 X0 F20000  # Moves extruder 0 to the initial position
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Sets extruder 1 as primary
    G1 X560 F20000  # Moves extruder 1 to the initial position
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY  # Activates copy mode on extruder 1 (applies to xyz movements -> G1 X Y Z...)
    ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder stepper follows movements commanded to extruder
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder"  # Synchronizes extruder movements for copy mode (extruder 1 follows extruder 0 movements) (applies to extruder movements ..G1 E..)
    
    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=4  # Controls both extruder fans


[gcode_macro ACTIVAR_MODO_ESPEJO]
# Activate mirror mode on the IDEX printer
gcode:
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    SET_GCODE_OFFSET X=0 Y=0
    {% if 'z' in printer.toolhead.homed_axes %}
        G91  # Set to relative movement mode
        G1 Z0.4 F1800  # Raise the head slightly to avoid collisions
        G90  # Return to absolute movement mode
    {% endif %}
    PARK_extruder SPEED={toolchange_speed} # Parks extruder 0
    PARK_extruder1 SPEED={toolchange_speed} # Parks extruder 1
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY  # Sets extruder 0 as primary
    G1 X460 F20000  # Moves extruder 0 to the initial position
    
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # Sets extruder 1 as primary
    G1 X660 F20000  # Moves extruder 1 to the initial position
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR  # Activates mirror mode on extruder 1 (applies to xyz movements -> G1 X Y Z...)

    ACTIVATE_EXTRUDER EXTRUDER=extruder  # Activates extruder 0
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE="extruder" # Ensures that extruder stepper follows movements commanded to extruder
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE="extruder"  # Synchronizes extruder movements for copy mode (extruder 1 follows extruder 0 movements) (applies to extruder movements ..G1 E..)
    
    # Added for handling M106 fans
    SET_GCODE_VARIABLE MACRO=FAN_VARIABLE VARIABLE=active_fan VALUE=4  # Controls both extruder fans


[gcode_macro Park_extruder]
# Parks the active extruder (used in T0 and T1)
gcode:
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    {% set current_speed = printer.toolhead.max_velocity %}
    {% set current_accel = printer.toolhead.max_accel %}
    {% set park_pos = printer.configfile.settings.stepper_x.position_endstop %}

    SAVE_GCODE_STATE NAME=park0  # Saves the current G-code state
    {% if "x" in printer.toolhead.homed_axes %}
        SET_GCODE_OFFSET X=0 Y=0
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY # Selects extruder carriage 0
        SET_VELOCITY_LIMIT VELOCITY={toolchange_speed} ACCEL={toolchange_accel}
        G90
        G1 X{park_pos} F{(toolchange_speed * 60)}
        SET_VELOCITY_LIMIT VELOCITY={current_speed} ACCEL={current_accel}
    {% else %}
        RESPOND MSG="Es necesario hacer home para aparcar el cabezal"
    {% endif %}
    RESTORE_GCODE_STATE NAME=park0  # Restores the G-code state

[gcode_macro Park_extruder1]
# Parks the active extruder (used in T0 and T1)
gcode:
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    {% set current_speed = printer.toolhead.max_velocity %}
    {% set current_accel = printer.toolhead.max_accel %}
    {% set park_pos = printer.configfile.settings.dual_carriage.position_endstop %}
    
    SAVE_GCODE_STATE NAME=park1  # Saves the current G-code state
    
    # parks the toolhead if printer is homed
    {% if "x" in printer.toolhead.homed_axes %}
        SET_GCODE_OFFSET X=0 Y=0
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY # Selects extruder carriage 1
        SET_VELOCITY_LIMIT VELOCITY={toolchange_speed} ACCEL={toolchange_accel}
        G90
        G1 X{park_pos} F{(toolchange_speed * 60)}
        SET_VELOCITY_LIMIT VELOCITY={current_speed} ACCEL={current_accel}
    {% else %}
        RESPOND MSG="Es necesario hacer home para aparcar el cabezal"
    {% endif %}
    RESTORE_GCODE_STATE NAME=park1  # Restores the G-code state  


[gcode_macro _NORMAL_TOOLCHANGE]
# If params are defined, it will zhop, park extruder, go to the next position, and go to z position. Else, it will only park extruder, no z hop, no travel to piece
gcode:
    # Params
    {% set new_t = params.T|default(0)|int %}
    {% set x_after_toolchange = (params.X_AFTER_TOOLCHANGE|float if 0 <= params.X_AFTER_TOOLCHANGE|default(-1.0)|float <= 1120 else -1.0) %}
    {% set y_after_toolchange = (params.Y_AFTER_TOOLCHANGE|float if 0 <= params.Y_AFTER_TOOLCHANGE|default(-1.0)|float <= 720 else -1.0) %}
    {% set z_after_toolchange = (params.Z_AFTER_TOOLCHANGE|float if 0 <= params.Z_AFTER_TOOLCHANGE|default(-1.0)|float <= 620 else -1.0) %}
    
    # Defines
    {% set z_hop_distance = 0.5 %}
    {% set z_hop_speed = 30 %}

    # Print variables:
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set z_max = printer.configfile.config["stepper_z"]["position_max"]|default(625)|float %}
    {% set print_height = variables.print_height|float if variables.print_height is defined else 0.0 %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    {% set current_z = printer.toolhead.position.z|default(z_max)|float %}
    {% set enable_toolchange_purge = variables.enable_toolchange_purge|default(0)|int %}
    {% set toolchange_purge_distance = variables.toolchange_purge_distance|default(10)|int %}
    {% set toolchange_purge_velocity = variables.toolchange_purge_velocity|default(1500)|int %}
    {% set enable_toolchange_clean = variables.enable_toolchange_clean|default(0)|int %}
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    {% set current_speed = printer.toolhead.max_velocity %}
    {% set current_accel = printer.toolhead.max_accel %}

    # Offsets:
    {% set offset_t1_x = printer.save_variables.variables.offset_t1_x %}
    {% set offset_t1_y = printer.save_variables.variables.offset_t1_y %}

    # Do a z hop only if z_after_toolchange is defined:
    {% if z_after_toolchange != -0.1 %}
        # z_hop_distance if mode is by layer, or print_height if it is by object, only if current_z is lower than max_position less z_hop_distance (ensure to not exceed machine limits)
        {% if current_z < (z_max - z_hop_distance) %}
            {% if print_sequence == "by layer" %} # Z hop is only done when print sequence is by layer
                G91 # Relative movement in order to do z hop
                G1 Z{z_hop_distance} F{z_hop_speed * 60}
                G90
            {% elif print_sequence == "by object" and (print_height > z_hop_distance) and (current_z < print_height) and (print_height <= z_max ) %}
                G90
                G1 Z{print_height} F{z_hop_speed * 60}
            {% endif %}
        {% endif %}
    {% endif %}

    # Proceed to park the oposite extruder to the new extruder:
    {% if new_t == 0 %}
        Park_extruder1
    {% elif new_t == 1 %}
        Park_extruder
    {% endif %}

    # Turn off actual extruder layer fan
    M106 S0

    # If enabled, purge the desired extruder prior to exit:
    {% if enable_toolchange_purge == 1 %}
        {% if new_t == 0 %}
            Park_extruder
            PURGE_IN_BOX_T0 DISTANCE={toolchange_purge_distance} SPEED={toolchange_purge_velocity} 
        {% elif new_t == 1 %}
            Park_extruder1
            PURGE_IN_BOX_T1 DISTANCE={toolchange_purge_distance} SPEED={toolchange_purge_velocity} 
        {% endif %}
    {% endif %}

    # If enabled, clean the desired extruder priot to exit:
    {% if enable_toolchange_clean == 1 %}
        {% if new_t == 0 %}
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            CLEAN_NOOZLE_T0
        {% elif new_t == 1 %}
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
            CLEAN_NOOZLE_T1
        {% endif %}
    {% endif %}

    # Proceed to activate the active toolhead, and go to xy position, then go down in z, also, apply the offset to the movement
    # Activate toolhead
    {% if new_t == 0 %}
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY 
    {% elif new_t == 1 %}
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  
        SET_GCODE_OFFSET X={offset_t1_x} Y={offset_t1_y}
    {% endif %}

    # Ensure to travel only if these params are defined
    {% if (x_after_toolchange != -0.1 and y_after_toolchange != -0.1) and ((x_after_toolchange >= 0 and x_after_toolchange <= 1120) and (y_after_toolchange >= 0  and y_after_toolchange <=720)) %}
        SET_VELOCITY_LIMIT VELOCITY={toolchange_speed} ACCEL={toolchange_accel}
        G90
        G1 X{x_after_toolchange} Y{y_after_toolchange} F{(toolchange_speed * 60)}
        SET_VELOCITY_LIMIT VELOCITY={current_speed} ACCEL={current_accel}
    {% endif %}

    # And go to z coordinate if defined:
    {% if z_after_toolchange != -0.1 and z_after_toolchange >= 0 and z_after_toolchange <= 620 %}
        G90
        G1 Z{z_after_toolchange} F{z_hop_speed * 60}
    {% endif %}

    # Always ensure to be in absolute coordinates 
    G90


[gcode_macro _DUAL_TOOLCHANGE]
# Does a dual toolchange to the desired positions if params are specified, else it will do a dual toolchange but to the previous position
gcode:
    # Params:
    {% set new_t = params.T|default(0)|int %}
    {% set x_after_toolchange = (params.X_AFTER_TOOLCHANGE|float if params.X_AFTER_TOOLCHANGE|default(-1.0)|float >= 0 else -1.0) %}
    {% set y_after_toolchange = (params.Y_AFTER_TOOLCHANGE|float if params.Y_AFTER_TOOLCHANGE|default(-1.0)|float >= 0 else -1.0) %}
    {% set z_after_toolchange = (params.Z_AFTER_TOOLCHANGE|float if params.Z_AFTER_TOOLCHANGE|default(-1.0)|float >= 0 else -1.0) %}


    # Defines
    {% set parking_position_T0 = printer.configfile.settings.stepper_x.position_endstop %}
    {% set parking_position_T1 = printer.configfile.settings.dual_carriage.position_endstop %}
    {% set z_hop_distance = 0.5 %}
    {% set z_hop_speed = 30 %}

    # Variables
    {% set variables = printer["gcode_macro _PRINT_VARIABLE"] %}
    {% set z_max = printer.configfile.config["stepper_z"]["position_max"]|default(625)|float %}
    {% set print_height = variables.print_height|float if variables.print_height is defined else 0.0 %}
    {% set print_sequence = variables.print_sequence if variables.print_sequence is defined else "by layer" %}
    {% set current_z = printer.toolhead.position.z|default(z_max)|float %}
    {% set toolchange_speed = params.SPEED|default(variables.toolchange_speed|default(1000))|float %}
    {% set toolchange_accel = params.ACCEL|default(variables.toolchange_accel|default(4000))|float %}
    {% set current_speed = printer.toolhead.max_velocity %}
    {% set current_accel = printer.toolhead.max_accel %}

    # Offsets:
    {% set offset_t1_x = printer.save_variables.variables.offset_t1_x %}
    {% set offset_t1_y = printer.save_variables.variables.offset_t1_y %}

    # Security checks (if params are not defined, set xyz to the actual toolhead position (prior to the toolchange))
    {% if x_after_toolchange == -0.1 or y_after_toolchange == -0.1 %}
        {% set x_after_toolchange = printer.toolhead.position.x %}
        {% set x_after_toolchange = printer.toolhead.position.y %}
    {% endif %}

    {% if z_after_toolchange == -0.1 %}
        {% set z_after_toolchange = current_z %}
    {% endif %}

    
    # Do a z hop:
    # z_hop_distance if mode is by layer, or print_height if it is by object, only if current_z is lower than max_position less z_hop_distance (ensure to not exceed machine limits)
    {% if current_z < (z_max - z_hop_distance) %}
        {% if print_sequence == "by layer" %} # Z hop is only done when print sequence is by layer
            G91 # Relative movement in order to do z hop
            G1 Z{z_hop_distance} F{z_hop_speed * 60}
            G90
        {% elif print_sequence == "by object" and (print_height > z_hop_distance) and (current_z < print_height) and (print_height <= z_max ) %}
            G90
            G1 Z{print_height} F{z_hop_speed * 60}
        {% endif %}
    {% endif %}


    SET_VELOCITY_LIMIT VELOCITY={toolchange_speed} ACCEL={toolchange_accel}
    SET_GCODE_OFFSET X=0 Y=0 # Ensure to reset offsets prior to movements

    # Turn off actual extruder layer fan
    M106 S0
    
    {% if new_t == 0 %}

        # Get actual positions and desired positions
        {% set t0_act_x = parking_position_T0|float %}
        {% set t1_act_x = printer.toolhead.position.x |float if printer.dual_carriage.carriage_1 == "PRIMARY" else parking_position_T1 %} # For security, set to parking_position_T1 if it is not in primary so it will not move
        {% set t0_new_x = x_after_toolchange | float if 0 <= x_after_toolchange <= 1120 else (t1_act_x | float if 0 < t1_act_x <= 1120 else parking_position_T0) %} # If an anormal value is set, go to previous t1 position, also if t1 position isn't anormal too
        {% set t1_new_x = parking_position_T1|float %}
        {% set act_y = printer.toolhead.position.y |float if 0 <= printer.toolhead.position.y <= 720 else 99999999999 %} # If something wrong, set an anormal value to know it in y_distance calculation
        {% set new_y = y_after_toolchange |float if 0 <= y_after_toolchange <= 720 else 360 %} # If next_y is anormal, set new_y to the middle of the bed
        {% set t0_distance = (t0_new_x - t0_act_x) |abs %}
        {% set t1_distance = (t1_new_x - t1_act_x) |abs %}
        {% set y_distance = (new_y - act_y) if (new_y - act_y) <= 720 else 0 %} # If something anormal, set y_distance to 0 in order to do not move

        # Ensure to make T0 be in its parking position (now t0_act_x)
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        G90
        G1 X{t0_act_x} F{(toolchange_speed * 60)}

        # Proceed with the toolchange 
        {% if t0_distance >= t1_distance %}
            #Move T1 to park position in copy mode -> Relative movement to the right
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
            G91
            G1 X{t1_distance} Y{y_distance} F{(toolchange_speed * 60)}
            G90
            # Ensure to park T1 (it already should be there, but just in case)
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
            G1 X{t1_new_x} F{(toolchange_speed * 60)}
            # And make T0 go to the piece
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            G1 X{t0_new_x} F{(toolchange_speed * 60)}
            
        {% else %}
            # Move T0 to the piece while moving T1 to park position -> Relative movement to the right
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
            G91
            G1 X{t0_distance} Y{y_distance} F{(toolchange_speed * 60)}
            G90
            # Move T1 to park position
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
            G1 X{t1_new_x} F{(toolchange_speed * 60)}
            # Start printing with T0
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        {% endif %}
        
    {% elif new_t == 1 %}
        {% set t0_act_x = printer.toolhead.position.x |float if printer.dual_carriage.carriage_0 == "PRIMARY" else parking_position_T0 %}
        {% set t1_act_x = parking_position_T1|float %}
        {% set t0_new_x = parking_position_T0|float %}
        {% set t1_new_x = x_after_toolchange |float if 0 < x_after_toolchange < 1120 else (t0_act_x | float if 0 < t0_act_x <= 1120 else parking_position_T1) %}
        {% set act_y = printer.toolhead.position.y |float if 0 <= printer.toolhead.position.y <= 720 else 99999999999 %}
        {% set new_y = y_after_toolchange |float if 0 <= y_after_toolchange <= 720 else 360 %}
        {% set t0_distance = (t0_new_x - t0_act_x) |abs %}
        {% set t1_distance = (t1_new_x - t1_act_x) |abs %}
        {% set y_distance = (new_y - act_y) if (new_y - act_y) <= 720 else 0 %} 

        # Ensure to make T1 be in its parking position (now t1_act_x)
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        G90
        G1 X{t1_act_x} F{(toolchange_speed * 60)}
        
        {% if t0_distance >= t1_distance %}
            # Move T1 to print position while moving t0 to its parking position, in copy mode -> Relative movement to the left
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
            G91
            G1 X-{t1_distance} Y{y_distance} F{(toolchange_speed * 60)} # Move T0 to park position
            G90
            # End the movement parking T0
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            G1 X{t0_new_x} F{(toolchange_speed * 60)}
            # Set T1 as principal and print
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        {% else %}
            # Move T0 to park position while moving T1 to print position in copy mode -> Relative movement to the left
            SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
            G91
            G1 X-{t0_distance} Y{y_distance} F{(toolchange_speed * 60)}
            G90
            # Move T1 to print position
            SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
            G1 X{t1_new_x} F{(toolchange_speed * 60)}
        {% endif %}
    {% endif %}

    # Go to the desired z height:
    G1 Z{z_after_toolchange} F{(z_hop_speed * 60)}
    
    # Restore limits
    SET_VELOCITY_LIMIT VELOCITY={current_speed} ACCEL={current_accel}



