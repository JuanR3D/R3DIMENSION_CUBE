#######################################################
#                                                     #
# File Name: generic_manta_m8p.cfg                    #
# Author: Juan Ignacio Muñoz Sánchez                  #
# Creation Date: 2024-10-04                           #
# Company: R3DIMENSION                                #
# Firmware Version: Klipper v0.12.0-316-g96cceed2     #
#                                                     #
# Description:                                        #
# This file contains the common pin mappings for the  #
# BIGTREETECH Manta M8P V2.0. To use this             #
# configuration, the firmware must be compiled for    #
# the STM32H723 with a "128KiB bootloader", "25 MHz   #
# crystal", and "USB (on PA11/PA12)", "CAN bus (on    #
# PD0/PD1)" or Serial (on USART1 PA10/PA9).           #
#                                                     #
# This configuration ensures the proper functioning   #
# of motors, sensors, heaters, fans, and other        #
# components. For detailed descriptions of the        #
# parameters, see the Klipper documentation:          #
# https://www.klipper3d.org/Config_Reference.html#    #
# additional-stepper-motors-and-extruders.            #
#                                                     #
# IMPORTANT NOTE: ROTATION DISTANCE                   #
# THE ROTATION DISTANCE OF XY STEPPER MOTORS SHOULD BE#
# 60 MM, NEVERTHLESS, AS THE BELTS TENSION CHANGES    #
# THIS VALUE CHANGES, AND IT IS UPDATED BY THE RESULTS#
# OF A DIMENSIONAL PRINT TEST, AS THE FOLLOWING:      #
# NEW_DISTANCE = OLD_DISTANCE * (REAL/SPECTED)        #
# ** SPECTED AND REAL ARE THE DISTANCE RESULTS OF THE #
# PRINT TEST
#                                                     #
#######################################################



#-------------------------------------------------------MOTORS-----------------------------------------------------------#    
##########################################
#DUAL CARRIAGE (X AXIS)
##########################################

# Motor1 - X Axis
[stepper_x]
dir_pin: M8_DIR # Direction pin
step_pin: M8_STEP # Step pin
enable_pin: M8_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
microsteps: 16 # Microstepping setting
full_steps_per_rotation: 200 # Full steps per rotation
rotation_distance: 32 # Distance moved per rotation (mm)
endstop_pin: ^M1_ENDSTOP # Endstop pin
position_endstop: -55 # Endstop position
position_max: 1120 # Max position
position_min: -65 # Min position
homing_speed: 150 # Homing speed

# Motor2 - U Axis (X1) (Dual Carriage)
[dual_carriage]
axis: x # Axis type
dir_pin: M7_DIR # Direction pin
step_pin: M7_STEP # Step pin
enable_pin: M7_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
microsteps: 16 # Microstepping setting
rotation_distance: 32 # Distance moved per rotation (mm)
full_steps_per_rotation: 200 # Full steps per rotation
endstop_pin: ^M2_ENDSTOP # Endstop pin
position_endstop: 1180 # Endstop position
position_max: 1185 # Max position
homing_speed: 150 # Homing speed
safe_distance:100 # Minimum distance between carriages

#########################################################
#Y AXIS (TWO MOTORS)
#########################################################

# Motor3 - Y1 Axis
[stepper_y]
dir_pin: M6_DIR # Direction pin
step_pin: M6_STEP # Step pin
enable_pin: M6_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
microsteps: 16 # Microstepping setting
rotation_distance: 32 # Distance moved per rotation (mm) # Antes habia 59.85 y la medida ha sido 174.3
full_steps_per_rotation: 200 # Full steps per rotation
endstop_pin: ^M3_ENDSTOP # Endstop pin
position_endstop: 1000 # Endstop position
position_max: 1000 # Max position
position_min: -2 # Min position
homing_speed: 70 # Homing speed
second_homing_speed: 10

# Motor4 - Y2 Axis
[stepper_y1]
dir_pin: M5_DIR # Direction pin
step_pin: M5_STEP # Step pin
enable_pin: M5_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
microsteps: 16 # Microstepping setting
rotation_distance: 32 # Distance moved per rotation (mm)
full_steps_per_rotation: 200 # Full steps per rotation
endstop_pin: ^M4_ENDSTOP # Endstop pin

#############################################################
#Z AXIS (4 MOTORS)
#############################################################

# Motor5
[stepper_z]
dir_pin: M4_DIR # Direction pin
step_pin: M4_STEP # Step pin
enable_pin: M4_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
rotation_distance: 2.5 # Distance moved per rotation (mm)
microsteps: 32 # Microstepping setting
full_steps_per_rotation: 200 # Full steps per rotation
endstop_pin: PC15 # Endstop pin
position_endstop: 0
position_max: 1000 # Max position
position_min: -2.0 # Min position
homing_speed: 10 # Homing speed
second_homing_speed: 3 # Speed for second homing
homing_retract_dist: 7 # Retract distance after homing
homing_retract_speed: 30

# Motor6
[stepper_z1]
dir_pin: M3_DIR # Direction pin
step_pin: M3_STEP # Step pin
enable_pin: M3_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
rotation_distance: 2.5 # Distance moved per rotation (mm)
microsteps:32 # Microstepping setting
full_steps_per_rotation: 200 # Full steps per rotation

# Motor7
[stepper_z2]
dir_pin: M2_DIR # Direction pin
step_pin: M2_STEP # Step pin
enable_pin: M2_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
rotation_distance: 2.5 # Distance moved per rotation (mm)
microsteps: 32 # Microstepping setting
full_steps_per_rotation: 200 # Full steps per rotation

# Motor8
[stepper_z3]
dir_pin: M1_DIR # Direction pin
step_pin: M1_STEP # Step pin
enable_pin: M1_ENABLE # Enable pin
step_pulse_duration: 0.000002 # Pulse duration for stepping
rotation_distance: 2.5 # Distance moved per rotation (mm)
microsteps: 32 # Microstepping setting
full_steps_per_rotation: 200 # Full steps per rotation

#-------------------------------------------------------TEMPERATURES AND FANS-----------------------------------------------------------#

###################################################################
#BED TEMPERATURE CONTROL
###################################################################
[temperature_sensor Silicona]
sensor_pin: TH2
sensor_type: PT1000
pullup_resistor: 2200
#sensor_type: ATC Semitec 104GT-2

[heater_bed]
heater_pin: BED_OUT
pwm_cycle_time: 0.3
sensor_pin: TH1
#sensor_type: ATC Semitec 104GT-2
sensor_type: PT1000
pullup_resistor: 2200
###########smooth_time: 3.0 # Time in seconds that the temperature sensor is smoothed in order to avoid noise in measurements
smooth_time: 0.5
control: watermark
max_delta: 0.005
contrast_sensor: Silicona
contrast_temp_diff: 8 # Max temp between heater_bed and constrast_sensor when heater_bed temp is over eval_temp_diff (For example, if heater_bed is 70 and contrast_sensor is over 70 + temp_diff, pwm value will be 0)
eval_temp_diff: 3 # Max temp between heater_bed and target to start controlling the contrast_temp_diff -> In order to avoid overshoot
temp_correction: -0.5 # Temperature correction offset -> After stabilizate temp, it usually has an offset between target and real temp. This value corrects that offset.
###########control: pid
###########pid_kp: 6
###########pid_ki: 1.125
###########pid_kd: 3000   #Works almost fine with 8, 1.111, 3000 
#pid_kp: 47.415 
#pid_ki: 0.129 
#pid_kd: 4372.289
min_temp: 0
max_temp: 120

# This section adds lets klipper be more flexible when reading heater_bed (as our bed has a big inercy, klipper can think it is not heating as spected)
[verify_heater heater_bed] 
max_error: 300  # Configuration similar to the main extruder for increased tolerance
check_gain_time: 120  # Allows more time for initial heating
hysteresis: 15  # Increases the acceptable temperature margin around the target temperature
heating_gain: 1  #The minimum temperature (in Celsius) that the heater must increase by during the check_gain_time check.


# If one wants to use again the dual loop pid, these are the params that were used: (note that it wasn't very well calibrated, it produced an offset in bed surface)
# Also note that heaters.py and pid_calibrate should be changed to the dual pid ones: https://github.com/rodrigo2019/klipper/tree/master-danger/klippy/extras
#[heater_bed]
# Heater parameters:
#heater_pin: BED_OUT # Pin for bed heater
#pwm_cycle_time: 0.3
# Primary sensor parameters (bed surface)
#sensor_pin: TH2 # Pin for bed temperature sensor -IMPORTANT NOTE: THIS SHOULD BE THB, BUT IT SEEMS THE JUMPER DOESNT WORK FOR NOW IN ORDER TO CONNECT PT1000, SO IT HAS BEEN PLACED IN TH2
#sensor_type: PT1000 # Temperature sensor type
#pullup_resistor: 2200
# Secondary sensor parameters (Sillicon heater)
#secondary_sensor_name: Silicona
#secondary_max_temp_target: 120 # Max temperature for silicon to heat
# Control parameters -> Dual Loop PID
#control: dual_loop_pid
#primary_pid_kp:16.332
#primary_pid_ki:0.040
#primary_pid_kd:1686.137
#secondary_pid_kp:62.535
#secondary_pid_ki:2.220
#secondary_pid_kd:440.351
# Safety params for bed surface
#min_temp: 0 # Minimum bed temperature
#max_temp: 140 # Maximum bed temperature (we sell it is 110, so 10º as a little margin is a good value) (it is set to 140 in order it doesnt get error when calibrating, dont forget to set 120 after)


###################################################################
# SSR RELAY BED TEMPERATURE CONTROL
###################################################################
[heater_fan _ventilador_rele_ssr]
pin: FAN2 # Pin for bed heater fan
heater: heater_bed # Reference to the bed heater
heater_temp: 50.0 # Threshold temperature for the fan
fan_speed: 1.0 # Fan speed
shutdown_speed: 1.0 # Fan shutdown speed

###################################################################
#MAIN LIGHTING CONTROL
###################################################################
[output_pin _iluminacion_principal]
pin: FAN3 # Pin for main lighting
pwm: False # Disable PWM
value: 1.0 # Initial value (on)
shutdown_value: 1.0 # Shutdown value

    
###################################################################
#EXTRUDERS TEMPERATURE CONTROL - LIQUID COOLING
###################################################################
[temperature_fan _bomba_refrigeracion]
pin: FAN5 # Pin for cooling pump
max_power: 1.0 # Maximum power for the pump
shutdown_speed: 1.0 # Shutdown speed
cycle_time: 0.010 # Cycle time for fan operation
kick_start_time: 0.100 # Kick-start time
off_below: 0.0 # Turn off if below this value
tachometer_pin: ^TAC_FAN5 # Pin for tachometer
tachometer_ppr: 2 # Tachometer pulses per revolution
tachometer_poll_interval: 0.0015 # Tachometer polling interval
enable_pin: FAN4 # Pin to enable pump power
sensor_type: temperature_combined # Combined temperature sensor type
sensor_list: extruder,extruder1 # List of temperature sensors
combination_method: max # Method to combine sensor readings
maximum_deviation: 400 # Max allowed deviation
control: watermark # Control method for maintaining temperature
max_temp: 400 # Max temperature for cooling
min_temp: -10 # Min temperature for cooling
target_temp: 60.0 # Target temperature for cooling -> It will turn on if temperature is over this value

[temperature_fan _ventiladores_refrigeracion]
pin: FAN6 # Pin for additional cooling fans
max_power: 1.0 # Maximum power for the fans
shutdown_speed: 1.0 # Shutdown speed
cycle_time: 0.010 # Cycle time for fan operation
kick_start_time: 0.100 # Kick-start time
off_below: 0.0 # Turn off if below this value
tachometer_pin: ^TAC_FAN6 # Pin for tachometer
tachometer_ppr: 2 # Tachometer pulses per revolution
tachometer_poll_interval: 0.0015 # Tachometer polling interval
sensor_type: temperature_combined # Combined temperature sensor type
sensor_list: extruder,extruder1 # List of temperature sensors
combination_method: max # Method to combine sensor readings
maximum_deviation: 400 # Max allowed deviation
control: watermark # Control method for maintaining temperature
max_temp: 400 # Max temperature for cooling
min_temp: -10 # Min temperature for cooling
target_temp: 60.0 # Target temperature for cooling



###################################################################
#MCU TEMPERATURE CONTROL
###################################################################
[fan_generic _MANTA_M8P_FAN]
pin: CB1: PI_FAN # Pin for MCU cooling fan
max_power: 1.0
shutdown_speed: 1.0

[temperature_sensor MCU_MANTA_M8P]
sensor_mcu: mcu
sensor_type: temperature_mcu

[temperature_sensor MCU_CB1]
sensor_type: temperature_host # Sensor type for monitoring CB1

[delayed_gcode start_manta_fan]
initial_duration: 1
gcode:
    SET_FAN_SPEED FAN=_MANTA_M8P_FAN SPEED=1.0

###################################################################
#OTHER BOARD FAN CONTROL
###################################################################
# Other fans are activated as long as the machine is on but are not controlled.

#-------------------------------------------------------PRINT PAUSE-----------------------------------------------------------#

###################################################################
#CHECK OPEN DOOR
###################################################################
[gcode_button sensor_puertas]
pin: ^M5_ENDSTOP # Pin for door sensor
press_gcode: DOOR_CLOSED # Command for door closed
release_gcode: DOOR_OPENED # Command for door open

###################################################################
#CHECK MAGNETIC BED
###################################################################
[gcode_button sensor_cama_magnetica]
pin: ~CB1:PIN_12 # Pin for magnetic bed sensor
press_gcode: MAGNETIC_BED_ACTIVATED # Command for magnetic bed activated
release_gcode: MAGNETIC_BED_DEACTIVATED # Command for magnetic bed deactivated

###################################################################
#MOTOR FAILURE
###################################################################
[gcode_button alarma_xy]
pin: ~CB1:PIN_7 # Pin for XY carriage alarm
press_gcode: 
    SET_PIN PIN=FALLO_MOTORES VALUE=1.00
    FAIL_XY_PAUSE # Command for XY motor failure pause
    
release_gcode:
# Resets the value of the pin only if the printer isn't trying to reset the 
    {% if printer["output_pin _PIN_RESET_ALARMA_MOTOR"].value == 0 %}
        SET_PIN PIN=FALLO_MOTORES VALUE=0.00
    {% endif %}


[gcode_button alarma_z]
pin: ~CB1:PIN_11 # Pin for Z carriage motor alarm
press_gcode: 
    SET_PIN PIN=FALLO_MOTORES VALUE=1.00
    FAIL_Z_CANCEL # Command for Z motor failure pause
    
release_gcode:
# Resets the value of the pin only if the printer isn't trying to reset the alarm
    {% if printer["output_pin _PIN_RESET_ALARMA_MOTOR"].value == 0 %}
        SET_PIN PIN=FALLO_MOTORES VALUE=0.00
    {% endif %}

[output_pin _PIN_RESET_ALARMA_MOTOR]
pin: !CB1:PIN_13 # Pin to reset motor alarm
value: 0 # Initial value (off)

###################################################################
#POWER FAILURE
###################################################################
[gcode_button DC_48V_OK]
pin: ~CB1:PIN_28
press_gcode:
release_gcode: FAIL_DRIVERS_POWER_SUPPLY